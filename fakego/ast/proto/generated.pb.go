// Code generated by protoc-gen-go.
// source: generated.proto
// DO NOT EDIT!

/*
Package ast is a generated protocol buffer package.

It is generated from these files:
	generated.proto

It has these top-level messages:
	ExprStmt
	StarExpr
	DeclStmt
	BadDecl
	ChanDir
	ChanType
	Comment
	ReturnStmt
	IsExported
	NewIdent
	Node
	Expr
	Stmt
	Decl
	Spec
	ImportSpec
	CommentGroup
	Foo3
	Foo2
	AssignStmt
	BadExpr
	BadStmt
	BasicLit
	BinaryExpr
	BlockStmt
	BranchStmt
	CallExpr
	CaseClause
	CommClause
	CompositeLit
	DeferStmt
	Deferred
	Ellipsis
	EmptyStmt
	Field
	FieldList
	File
	ForStmt
	FuncDecl
	FuncLit
	FuncType
	GenDecl
	GoStmt
	Ident
	IfStmt
	IncDecStmt
	IndexExpr
	InterfaceType
	KeyValueExpr
	LabeledStmt
	MapType
	Object
	Package
	ParenExpr
	RangeStmt
	Scope
	SelectStmt
	SelectorExpr
	SendStmt
	SliceExpr
	StructType
	SwitchStmt
	ArrayType
	AddressTable
	TypeAssertExpr
	TypeSpec
	TypeSwitchStmt
	UnaryExpr
	ValueSpec
*/
package astproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeType int32

const (
	NodeType_ARRAYTYPE      NodeType = 0
	NodeType_ASSIGNSTMT     NodeType = 1
	NodeType_BADDECL        NodeType = 2
	NodeType_BADEXPR        NodeType = 3
	NodeType_BADSTMT        NodeType = 4
	NodeType_BASICLIT       NodeType = 5
	NodeType_BINARYEXPR     NodeType = 6
	NodeType_BLOCKSTMT      NodeType = 7
	NodeType_BRANCHSTMT     NodeType = 8
	NodeType_CALLEXPR       NodeType = 9
	NodeType_CASECLAUSE     NodeType = 10
	NodeType_CHANDIR        NodeType = 11
	NodeType_CHANTYPE       NodeType = 12
	NodeType_COMMCLAUSE     NodeType = 13
	NodeType_COMMENT        NodeType = 14
	NodeType_COMPOSITELIT   NodeType = 15
	NodeType_DECLSTMT       NodeType = 16
	NodeType_DEFERSTMT      NodeType = 17
	NodeType_ELLIPSIS       NodeType = 18
	NodeType_EMPTYSTMT      NodeType = 19
	NodeType_EXPRSTMT       NodeType = 20
	NodeType_FIELD          NodeType = 21
	NodeType_FIELDLIST      NodeType = 22
	NodeType_FILE           NodeType = 23
	NodeType_FORSTMT        NodeType = 24
	NodeType_FUNCDECL       NodeType = 25
	NodeType_FUNCLIT        NodeType = 26
	NodeType_FUNCTYPE       NodeType = 27
	NodeType_GENDECL        NodeType = 28
	NodeType_GOSTMT         NodeType = 29
	NodeType_IDENT          NodeType = 30
	NodeType_IFSTMT         NodeType = 31
	NodeType_IMPORTSPEC     NodeType = 32
	NodeType_INCDECSTMT     NodeType = 33
	NodeType_INDEXEXPR      NodeType = 34
	NodeType_INTERFACETYPE  NodeType = 35
	NodeType_ISEXPORTED     NodeType = 36
	NodeType_KEYVALUEEXPR   NodeType = 37
	NodeType_LABELEDSTMT    NodeType = 38
	NodeType_MAPTYPE        NodeType = 39
	NodeType_NEWIDENT       NodeType = 40
	NodeType_PACKAGE        NodeType = 41
	NodeType_PARENEXPR      NodeType = 42
	NodeType_RANGESTMT      NodeType = 43
	NodeType_RETURNSTMT     NodeType = 44
	NodeType_SELECTSTMT     NodeType = 45
	NodeType_SELECTOREXPR   NodeType = 46
	NodeType_SENDSTMT       NodeType = 47
	NodeType_SLICEEXPR      NodeType = 48
	NodeType_SPEC           NodeType = 49
	NodeType_STAREXPR       NodeType = 50
	NodeType_STRUCTTYPE     NodeType = 51
	NodeType_SWITCHSTMT     NodeType = 52
	NodeType_TYPEASSERTEXPR NodeType = 53
	NodeType_TYPESPEC       NodeType = 54
	NodeType_TYPESWITCHSTMT NodeType = 55
	NodeType_UNARYEXPR      NodeType = 56
	NodeType_VALUESPEC      NodeType = 57
	NodeType_COMMENTGROUP   NodeType = 58
	NodeType_OBJECT         NodeType = 59
	NodeType_DEFERRED       NodeType = 60
	NodeType_DEFERRED2      NodeType = 61
)

var NodeType_name = map[int32]string{
	0:  "ARRAYTYPE",
	1:  "ASSIGNSTMT",
	2:  "BADDECL",
	3:  "BADEXPR",
	4:  "BADSTMT",
	5:  "BASICLIT",
	6:  "BINARYEXPR",
	7:  "BLOCKSTMT",
	8:  "BRANCHSTMT",
	9:  "CALLEXPR",
	10: "CASECLAUSE",
	11: "CHANDIR",
	12: "CHANTYPE",
	13: "COMMCLAUSE",
	14: "COMMENT",
	15: "COMPOSITELIT",
	16: "DECLSTMT",
	17: "DEFERSTMT",
	18: "ELLIPSIS",
	19: "EMPTYSTMT",
	20: "EXPRSTMT",
	21: "FIELD",
	22: "FIELDLIST",
	23: "FILE",
	24: "FORSTMT",
	25: "FUNCDECL",
	26: "FUNCLIT",
	27: "FUNCTYPE",
	28: "GENDECL",
	29: "GOSTMT",
	30: "IDENT",
	31: "IFSTMT",
	32: "IMPORTSPEC",
	33: "INCDECSTMT",
	34: "INDEXEXPR",
	35: "INTERFACETYPE",
	36: "ISEXPORTED",
	37: "KEYVALUEEXPR",
	38: "LABELEDSTMT",
	39: "MAPTYPE",
	40: "NEWIDENT",
	41: "PACKAGE",
	42: "PARENEXPR",
	43: "RANGESTMT",
	44: "RETURNSTMT",
	45: "SELECTSTMT",
	46: "SELECTOREXPR",
	47: "SENDSTMT",
	48: "SLICEEXPR",
	49: "SPEC",
	50: "STAREXPR",
	51: "STRUCTTYPE",
	52: "SWITCHSTMT",
	53: "TYPEASSERTEXPR",
	54: "TYPESPEC",
	55: "TYPESWITCHSTMT",
	56: "UNARYEXPR",
	57: "VALUESPEC",
	58: "COMMENTGROUP",
	59: "OBJECT",
	60: "DEFERRED",
	61: "DEFERRED2",
}
var NodeType_value = map[string]int32{
	"ARRAYTYPE":      0,
	"ASSIGNSTMT":     1,
	"BADDECL":        2,
	"BADEXPR":        3,
	"BADSTMT":        4,
	"BASICLIT":       5,
	"BINARYEXPR":     6,
	"BLOCKSTMT":      7,
	"BRANCHSTMT":     8,
	"CALLEXPR":       9,
	"CASECLAUSE":     10,
	"CHANDIR":        11,
	"CHANTYPE":       12,
	"COMMCLAUSE":     13,
	"COMMENT":        14,
	"COMPOSITELIT":   15,
	"DECLSTMT":       16,
	"DEFERSTMT":      17,
	"ELLIPSIS":       18,
	"EMPTYSTMT":      19,
	"EXPRSTMT":       20,
	"FIELD":          21,
	"FIELDLIST":      22,
	"FILE":           23,
	"FORSTMT":        24,
	"FUNCDECL":       25,
	"FUNCLIT":        26,
	"FUNCTYPE":       27,
	"GENDECL":        28,
	"GOSTMT":         29,
	"IDENT":          30,
	"IFSTMT":         31,
	"IMPORTSPEC":     32,
	"INCDECSTMT":     33,
	"INDEXEXPR":      34,
	"INTERFACETYPE":  35,
	"ISEXPORTED":     36,
	"KEYVALUEEXPR":   37,
	"LABELEDSTMT":    38,
	"MAPTYPE":        39,
	"NEWIDENT":       40,
	"PACKAGE":        41,
	"PARENEXPR":      42,
	"RANGESTMT":      43,
	"RETURNSTMT":     44,
	"SELECTSTMT":     45,
	"SELECTOREXPR":   46,
	"SENDSTMT":       47,
	"SLICEEXPR":      48,
	"SPEC":           49,
	"STAREXPR":       50,
	"STRUCTTYPE":     51,
	"SWITCHSTMT":     52,
	"TYPEASSERTEXPR": 53,
	"TYPESPEC":       54,
	"TYPESWITCHSTMT": 55,
	"UNARYEXPR":      56,
	"VALUESPEC":      57,
	"COMMENTGROUP":   58,
	"OBJECT":         59,
	"DEFERRED":       60,
	"DEFERRED2":      61,
}

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}
func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (x *NodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeType_value, data, "NodeType")
	if err != nil {
		return err
	}
	*x = NodeType(value)
	return nil
}
func (NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ExprStmt struct {
	X                *Foo2  `protobuf:"bytes,1,req,name=X,json=x" json:"X,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExprStmt) Reset()                    { *m = ExprStmt{} }
func (m *ExprStmt) String() string            { return proto.CompactTextString(m) }
func (*ExprStmt) ProtoMessage()               {}
func (*ExprStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExprStmt) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

type StarExpr struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StarExpr) Reset()                    { *m = StarExpr{} }
func (m *StarExpr) String() string            { return proto.CompactTextString(m) }
func (*StarExpr) ProtoMessage()               {}
func (*StarExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeclStmt struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeclStmt) Reset()                    { *m = DeclStmt{} }
func (m *DeclStmt) String() string            { return proto.CompactTextString(m) }
func (*DeclStmt) ProtoMessage()               {}
func (*DeclStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BadDecl struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *BadDecl) Reset()                    { *m = BadDecl{} }
func (m *BadDecl) String() string            { return proto.CompactTextString(m) }
func (*BadDecl) ProtoMessage()               {}
func (*BadDecl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ChanDir struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChanDir) Reset()                    { *m = ChanDir{} }
func (m *ChanDir) String() string            { return proto.CompactTextString(m) }
func (*ChanDir) ProtoMessage()               {}
func (*ChanDir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ChanType struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChanType) Reset()                    { *m = ChanType{} }
func (m *ChanType) String() string            { return proto.CompactTextString(m) }
func (*ChanType) ProtoMessage()               {}
func (*ChanType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Comment struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ReturnStmt struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReturnStmt) Reset()                    { *m = ReturnStmt{} }
func (m *ReturnStmt) String() string            { return proto.CompactTextString(m) }
func (*ReturnStmt) ProtoMessage()               {}
func (*ReturnStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type IsExported struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsExported) Reset()                    { *m = IsExported{} }
func (m *IsExported) String() string            { return proto.CompactTextString(m) }
func (*IsExported) ProtoMessage()               {}
func (*IsExported) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type NewIdent struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *NewIdent) Reset()                    { *m = NewIdent{} }
func (m *NewIdent) String() string            { return proto.CompactTextString(m) }
func (*NewIdent) ProtoMessage()               {}
func (*NewIdent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Node struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// An AssignStmt node represents an assignment or
// a short variable declaration.
type Expr struct {
	Type             *NodeType       `protobuf:"varint,1,req,name=type,enum=github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType" json:"type,omitempty"`
	Badexpr          *BadExpr        `protobuf:"bytes,3,opt,name=badexpr" json:"badexpr,omitempty"`
	Binaryexpr       *BinaryExpr     `protobuf:"bytes,6,opt,name=binaryexpr" json:"binaryexpr,omitempty"`
	Callexpr         *CallExpr       `protobuf:"bytes,9,opt,name=callexpr" json:"callexpr,omitempty"`
	Exprstmt         *ExprStmt       `protobuf:"bytes,20,opt,name=exprstmt" json:"exprstmt,omitempty"`
	Indexexpr        *IndexExpr      `protobuf:"bytes,34,opt,name=indexexpr" json:"indexexpr,omitempty"`
	Keyvalueexpr     *KeyValueExpr   `protobuf:"bytes,37,opt,name=keyvalueexpr" json:"keyvalueexpr,omitempty"`
	Parenexpr        *ParenExpr      `protobuf:"bytes,42,opt,name=parenexpr" json:"parenexpr,omitempty"`
	Selectorexpr     *SelectorExpr   `protobuf:"bytes,46,opt,name=selectorexpr" json:"selectorexpr,omitempty"`
	Sliceexpr        *SliceExpr      `protobuf:"bytes,48,opt,name=sliceexpr" json:"sliceexpr,omitempty"`
	Starexpr         *StarExpr       `protobuf:"bytes,50,opt,name=starexpr" json:"starexpr,omitempty"`
	Typeassertexpr   *TypeAssertExpr `protobuf:"bytes,53,opt,name=typeassertexpr" json:"typeassertexpr,omitempty"`
	Unaryexpr        *UnaryExpr      `protobuf:"bytes,56,opt,name=unaryexpr" json:"unaryexpr,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Expr) Reset()                    { *m = Expr{} }
func (m *Expr) String() string            { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()               {}
func (*Expr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Expr) GetType() NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NodeType_ARRAYTYPE
}

func (m *Expr) GetBadexpr() *BadExpr {
	if m != nil {
		return m.Badexpr
	}
	return nil
}

func (m *Expr) GetBinaryexpr() *BinaryExpr {
	if m != nil {
		return m.Binaryexpr
	}
	return nil
}

func (m *Expr) GetCallexpr() *CallExpr {
	if m != nil {
		return m.Callexpr
	}
	return nil
}

func (m *Expr) GetExprstmt() *ExprStmt {
	if m != nil {
		return m.Exprstmt
	}
	return nil
}

func (m *Expr) GetIndexexpr() *IndexExpr {
	if m != nil {
		return m.Indexexpr
	}
	return nil
}

func (m *Expr) GetKeyvalueexpr() *KeyValueExpr {
	if m != nil {
		return m.Keyvalueexpr
	}
	return nil
}

func (m *Expr) GetParenexpr() *ParenExpr {
	if m != nil {
		return m.Parenexpr
	}
	return nil
}

func (m *Expr) GetSelectorexpr() *SelectorExpr {
	if m != nil {
		return m.Selectorexpr
	}
	return nil
}

func (m *Expr) GetSliceexpr() *SliceExpr {
	if m != nil {
		return m.Sliceexpr
	}
	return nil
}

func (m *Expr) GetStarexpr() *StarExpr {
	if m != nil {
		return m.Starexpr
	}
	return nil
}

func (m *Expr) GetTypeassertexpr() *TypeAssertExpr {
	if m != nil {
		return m.Typeassertexpr
	}
	return nil
}

func (m *Expr) GetUnaryexpr() *UnaryExpr {
	if m != nil {
		return m.Unaryexpr
	}
	return nil
}

type Stmt struct {
	Type             *NodeType       `protobuf:"varint,1,req,name=type,enum=github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType" json:"type,omitempty"`
	Badstmt          *BadStmt        `protobuf:"bytes,4,opt,name=badstmt" json:"badstmt,omitempty"`
	Blockstmt        *BlockStmt      `protobuf:"bytes,7,opt,name=blockstmt" json:"blockstmt,omitempty"`
	Branchstmt       *BranchStmt     `protobuf:"bytes,8,opt,name=branchstmt" json:"branchstmt,omitempty"`
	Declstmt         *DeclStmt       `protobuf:"bytes,16,opt,name=declstmt" json:"declstmt,omitempty"`
	Deferstmt        *DeferStmt      `protobuf:"bytes,17,opt,name=deferstmt" json:"deferstmt,omitempty"`
	Emptystmt        *EmptyStmt      `protobuf:"bytes,19,opt,name=emptystmt" json:"emptystmt,omitempty"`
	Exprstmt         *ExprStmt       `protobuf:"bytes,20,opt,name=exprstmt" json:"exprstmt,omitempty"`
	Forstmt          *ForStmt        `protobuf:"bytes,24,opt,name=forstmt" json:"forstmt,omitempty"`
	Gostmt           *GoStmt         `protobuf:"bytes,29,opt,name=gostmt" json:"gostmt,omitempty"`
	Ifstmt           *IfStmt         `protobuf:"bytes,31,opt,name=ifstmt" json:"ifstmt,omitempty"`
	Incdecstmt       *IncDecStmt     `protobuf:"bytes,33,opt,name=incdecstmt" json:"incdecstmt,omitempty"`
	Labeledstmt      *LabeledStmt    `protobuf:"bytes,38,opt,name=labeledstmt" json:"labeledstmt,omitempty"`
	Rangestmt        *RangeStmt      `protobuf:"bytes,43,opt,name=rangestmt" json:"rangestmt,omitempty"`
	Returnstmt       *ReturnStmt     `protobuf:"bytes,44,opt,name=returnstmt" json:"returnstmt,omitempty"`
	Selectstmt       *SelectStmt     `protobuf:"bytes,45,opt,name=selectstmt" json:"selectstmt,omitempty"`
	Sendstmt         *SendStmt       `protobuf:"bytes,47,opt,name=sendstmt" json:"sendstmt,omitempty"`
	Switchstmt       *SwitchStmt     `protobuf:"bytes,52,opt,name=switchstmt" json:"switchstmt,omitempty"`
	Typeswitchstmt   *TypeSwitchStmt `protobuf:"bytes,55,opt,name=typeswitchstmt" json:"typeswitchstmt,omitempty"`
	Assignstmt       *AssignStmt     `protobuf:"bytes,56,opt,name=assignstmt" json:"assignstmt,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Stmt) Reset()                    { *m = Stmt{} }
func (m *Stmt) String() string            { return proto.CompactTextString(m) }
func (*Stmt) ProtoMessage()               {}
func (*Stmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Stmt) GetType() NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NodeType_ARRAYTYPE
}

func (m *Stmt) GetBadstmt() *BadStmt {
	if m != nil {
		return m.Badstmt
	}
	return nil
}

func (m *Stmt) GetBlockstmt() *BlockStmt {
	if m != nil {
		return m.Blockstmt
	}
	return nil
}

func (m *Stmt) GetBranchstmt() *BranchStmt {
	if m != nil {
		return m.Branchstmt
	}
	return nil
}

func (m *Stmt) GetDeclstmt() *DeclStmt {
	if m != nil {
		return m.Declstmt
	}
	return nil
}

func (m *Stmt) GetDeferstmt() *DeferStmt {
	if m != nil {
		return m.Deferstmt
	}
	return nil
}

func (m *Stmt) GetEmptystmt() *EmptyStmt {
	if m != nil {
		return m.Emptystmt
	}
	return nil
}

func (m *Stmt) GetExprstmt() *ExprStmt {
	if m != nil {
		return m.Exprstmt
	}
	return nil
}

func (m *Stmt) GetForstmt() *ForStmt {
	if m != nil {
		return m.Forstmt
	}
	return nil
}

func (m *Stmt) GetGostmt() *GoStmt {
	if m != nil {
		return m.Gostmt
	}
	return nil
}

func (m *Stmt) GetIfstmt() *IfStmt {
	if m != nil {
		return m.Ifstmt
	}
	return nil
}

func (m *Stmt) GetIncdecstmt() *IncDecStmt {
	if m != nil {
		return m.Incdecstmt
	}
	return nil
}

func (m *Stmt) GetLabeledstmt() *LabeledStmt {
	if m != nil {
		return m.Labeledstmt
	}
	return nil
}

func (m *Stmt) GetRangestmt() *RangeStmt {
	if m != nil {
		return m.Rangestmt
	}
	return nil
}

func (m *Stmt) GetReturnstmt() *ReturnStmt {
	if m != nil {
		return m.Returnstmt
	}
	return nil
}

func (m *Stmt) GetSelectstmt() *SelectStmt {
	if m != nil {
		return m.Selectstmt
	}
	return nil
}

func (m *Stmt) GetSendstmt() *SendStmt {
	if m != nil {
		return m.Sendstmt
	}
	return nil
}

func (m *Stmt) GetSwitchstmt() *SwitchStmt {
	if m != nil {
		return m.Switchstmt
	}
	return nil
}

func (m *Stmt) GetTypeswitchstmt() *TypeSwitchStmt {
	if m != nil {
		return m.Typeswitchstmt
	}
	return nil
}

func (m *Stmt) GetAssignstmt() *AssignStmt {
	if m != nil {
		return m.Assignstmt
	}
	return nil
}

type Decl struct {
	Type             *NodeType `protobuf:"varint,1,req,name=type,enum=github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType" json:"type,omitempty"`
	Baddecl          *BadDecl  `protobuf:"bytes,2,opt,name=baddecl" json:"baddecl,omitempty"`
	Declstmt         *DeclStmt `protobuf:"bytes,16,opt,name=declstmt" json:"declstmt,omitempty"`
	Funcdecl         *FuncDecl `protobuf:"bytes,25,opt,name=funcdecl" json:"funcdecl,omitempty"`
	Gendecl          *GenDecl  `protobuf:"bytes,28,opt,name=gendecl" json:"gendecl,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Decl) Reset()                    { *m = Decl{} }
func (m *Decl) String() string            { return proto.CompactTextString(m) }
func (*Decl) ProtoMessage()               {}
func (*Decl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Decl) GetType() NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NodeType_ARRAYTYPE
}

func (m *Decl) GetBaddecl() *BadDecl {
	if m != nil {
		return m.Baddecl
	}
	return nil
}

func (m *Decl) GetDeclstmt() *DeclStmt {
	if m != nil {
		return m.Declstmt
	}
	return nil
}

func (m *Decl) GetFuncdecl() *FuncDecl {
	if m != nil {
		return m.Funcdecl
	}
	return nil
}

func (m *Decl) GetGendecl() *GenDecl {
	if m != nil {
		return m.Gendecl
	}
	return nil
}

type Spec struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ImportSpec struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ImportSpec) Reset()                    { *m = ImportSpec{} }
func (m *ImportSpec) String() string            { return proto.CompactTextString(m) }
func (*ImportSpec) ProtoMessage()               {}
func (*ImportSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type CommentGroup struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommentGroup) Reset()                    { *m = CommentGroup{} }
func (m *CommentGroup) String() string            { return proto.CompactTextString(m) }
func (*CommentGroup) ProtoMessage()               {}
func (*CommentGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Foo3 struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Foo3) Reset()                    { *m = Foo3{} }
func (m *Foo3) String() string            { return proto.CompactTextString(m) }
func (*Foo3) ProtoMessage()               {}
func (*Foo3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Foo2 struct {
	Type             *NodeType       `protobuf:"varint,1,req,name=type,enum=github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType" json:"type,omitempty"`
	Baddecl          *BadDecl        `protobuf:"bytes,2,opt,name=baddecl" json:"baddecl,omitempty"`
	Badexpr          *BadExpr        `protobuf:"bytes,3,opt,name=badexpr" json:"badexpr,omitempty"`
	Badstmt          *BadStmt        `protobuf:"bytes,4,opt,name=badstmt" json:"badstmt,omitempty"`
	Basiclit         *BasicLit       `protobuf:"bytes,5,opt,name=basiclit" json:"basiclit,omitempty"`
	Binaryexpr       *BinaryExpr     `protobuf:"bytes,6,opt,name=binaryexpr" json:"binaryexpr,omitempty"`
	Blockstmt        *BlockStmt      `protobuf:"bytes,7,opt,name=blockstmt" json:"blockstmt,omitempty"`
	Branchstmt       *BranchStmt     `protobuf:"bytes,8,opt,name=branchstmt" json:"branchstmt,omitempty"`
	Callexpr         *CallExpr       `protobuf:"bytes,9,opt,name=callexpr" json:"callexpr,omitempty"`
	Caseclause       *CaseClause     `protobuf:"bytes,10,opt,name=caseclause" json:"caseclause,omitempty"`
	Chandir          *ChanDir        `protobuf:"bytes,11,opt,name=chandir" json:"chandir,omitempty"`
	Chantype         *ChanType       `protobuf:"bytes,12,opt,name=chantype" json:"chantype,omitempty"`
	Commclause       *CommClause     `protobuf:"bytes,13,opt,name=commclause" json:"commclause,omitempty"`
	Comment          *Comment        `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`
	Compositelit     *CompositeLit   `protobuf:"bytes,15,opt,name=compositelit" json:"compositelit,omitempty"`
	Declstmt         *DeclStmt       `protobuf:"bytes,16,opt,name=declstmt" json:"declstmt,omitempty"`
	Deferstmt        *DeferStmt      `protobuf:"bytes,17,opt,name=deferstmt" json:"deferstmt,omitempty"`
	Ellipsis         *Ellipsis       `protobuf:"bytes,18,opt,name=ellipsis" json:"ellipsis,omitempty"`
	Emptystmt        *EmptyStmt      `protobuf:"bytes,19,opt,name=emptystmt" json:"emptystmt,omitempty"`
	Exprstmt         *ExprStmt       `protobuf:"bytes,20,opt,name=exprstmt" json:"exprstmt,omitempty"`
	Field            *Field          `protobuf:"bytes,21,opt,name=field" json:"field,omitempty"`
	Fieldlist        *FieldList      `protobuf:"bytes,22,opt,name=fieldlist" json:"fieldlist,omitempty"`
	File             *File           `protobuf:"bytes,23,opt,name=file" json:"file,omitempty"`
	Forstmt          *ForStmt        `protobuf:"bytes,24,opt,name=forstmt" json:"forstmt,omitempty"`
	Funcdecl         *FuncDecl       `protobuf:"bytes,25,opt,name=funcdecl" json:"funcdecl,omitempty"`
	Funclit          *FuncLit        `protobuf:"bytes,26,opt,name=funclit" json:"funclit,omitempty"`
	Functype         *FuncType       `protobuf:"bytes,27,opt,name=functype" json:"functype,omitempty"`
	Gendecl          *GenDecl        `protobuf:"bytes,28,opt,name=gendecl" json:"gendecl,omitempty"`
	Gostmt           *GoStmt         `protobuf:"bytes,29,opt,name=gostmt" json:"gostmt,omitempty"`
	Ident            *Ident          `protobuf:"bytes,30,opt,name=ident" json:"ident,omitempty"`
	Ifstmt           *IfStmt         `protobuf:"bytes,31,opt,name=ifstmt" json:"ifstmt,omitempty"`
	Importspec       *ImportSpec     `protobuf:"bytes,32,opt,name=importspec" json:"importspec,omitempty"`
	Incdecstmt       *IncDecStmt     `protobuf:"bytes,33,opt,name=incdecstmt" json:"incdecstmt,omitempty"`
	Indexexpr        *IndexExpr      `protobuf:"bytes,34,opt,name=indexexpr" json:"indexexpr,omitempty"`
	Interfacetype    *InterfaceType  `protobuf:"bytes,35,opt,name=interfacetype" json:"interfacetype,omitempty"`
	Isexported       *IsExported     `protobuf:"bytes,36,opt,name=isexported" json:"isexported,omitempty"`
	Keyvalueexpr     *KeyValueExpr   `protobuf:"bytes,37,opt,name=keyvalueexpr" json:"keyvalueexpr,omitempty"`
	Labeledstmt      *LabeledStmt    `protobuf:"bytes,38,opt,name=labeledstmt" json:"labeledstmt,omitempty"`
	Maptype          *MapType        `protobuf:"bytes,39,opt,name=maptype" json:"maptype,omitempty"`
	Newident         *NewIdent       `protobuf:"bytes,40,opt,name=newident" json:"newident,omitempty"`
	Package          *Package        `protobuf:"bytes,41,opt,name=package" json:"package,omitempty"`
	Parenexpr        *ParenExpr      `protobuf:"bytes,42,opt,name=parenexpr" json:"parenexpr,omitempty"`
	Rangestmt        *RangeStmt      `protobuf:"bytes,43,opt,name=rangestmt" json:"rangestmt,omitempty"`
	Returnstmt       *ReturnStmt     `protobuf:"bytes,44,opt,name=returnstmt" json:"returnstmt,omitempty"`
	Selectstmt       *SelectStmt     `protobuf:"bytes,45,opt,name=selectstmt" json:"selectstmt,omitempty"`
	Selectorexpr     *SelectorExpr   `protobuf:"bytes,46,opt,name=selectorexpr" json:"selectorexpr,omitempty"`
	Sendstmt         *SendStmt       `protobuf:"bytes,47,opt,name=sendstmt" json:"sendstmt,omitempty"`
	Sliceexpr        *SliceExpr      `protobuf:"bytes,48,opt,name=sliceexpr" json:"sliceexpr,omitempty"`
	Spec             *Spec           `protobuf:"bytes,49,opt,name=spec" json:"spec,omitempty"`
	Starexpr         *StarExpr       `protobuf:"bytes,50,opt,name=starexpr" json:"starexpr,omitempty"`
	Structtype       *StructType     `protobuf:"bytes,51,opt,name=structtype" json:"structtype,omitempty"`
	Switchstmt       *SwitchStmt     `protobuf:"bytes,52,opt,name=switchstmt" json:"switchstmt,omitempty"`
	Typeassertexpr   *TypeAssertExpr `protobuf:"bytes,53,opt,name=typeassertexpr" json:"typeassertexpr,omitempty"`
	Typespec         *TypeSpec       `protobuf:"bytes,54,opt,name=typespec" json:"typespec,omitempty"`
	Typeswitchstmt   *TypeSwitchStmt `protobuf:"bytes,55,opt,name=typeswitchstmt" json:"typeswitchstmt,omitempty"`
	Unaryexpr        *UnaryExpr      `protobuf:"bytes,56,opt,name=unaryexpr" json:"unaryexpr,omitempty"`
	Valuespec        *ValueSpec      `protobuf:"bytes,57,opt,name=valuespec" json:"valuespec,omitempty"`
	Commentgroup     *CommentGroup   `protobuf:"bytes,58,opt,name=commentgroup" json:"commentgroup,omitempty"`
	Assignstmt       *AssignStmt     `protobuf:"bytes,59,opt,name=assignstmt" json:"assignstmt,omitempty"`
	Object           *Object         `protobuf:"bytes,60,opt,name=object" json:"object,omitempty"`
	Arraytype        *ArrayType      `protobuf:"bytes,61,opt,name=arraytype" json:"arraytype,omitempty"`
	Deferred         *Deferred       `protobuf:"bytes,62,opt,name=deferred" json:"deferred,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Foo2) Reset()                    { *m = Foo2{} }
func (m *Foo2) String() string            { return proto.CompactTextString(m) }
func (*Foo2) ProtoMessage()               {}
func (*Foo2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Foo2) GetType() NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NodeType_ARRAYTYPE
}

func (m *Foo2) GetBaddecl() *BadDecl {
	if m != nil {
		return m.Baddecl
	}
	return nil
}

func (m *Foo2) GetBadexpr() *BadExpr {
	if m != nil {
		return m.Badexpr
	}
	return nil
}

func (m *Foo2) GetBadstmt() *BadStmt {
	if m != nil {
		return m.Badstmt
	}
	return nil
}

func (m *Foo2) GetBasiclit() *BasicLit {
	if m != nil {
		return m.Basiclit
	}
	return nil
}

func (m *Foo2) GetBinaryexpr() *BinaryExpr {
	if m != nil {
		return m.Binaryexpr
	}
	return nil
}

func (m *Foo2) GetBlockstmt() *BlockStmt {
	if m != nil {
		return m.Blockstmt
	}
	return nil
}

func (m *Foo2) GetBranchstmt() *BranchStmt {
	if m != nil {
		return m.Branchstmt
	}
	return nil
}

func (m *Foo2) GetCallexpr() *CallExpr {
	if m != nil {
		return m.Callexpr
	}
	return nil
}

func (m *Foo2) GetCaseclause() *CaseClause {
	if m != nil {
		return m.Caseclause
	}
	return nil
}

func (m *Foo2) GetChandir() *ChanDir {
	if m != nil {
		return m.Chandir
	}
	return nil
}

func (m *Foo2) GetChantype() *ChanType {
	if m != nil {
		return m.Chantype
	}
	return nil
}

func (m *Foo2) GetCommclause() *CommClause {
	if m != nil {
		return m.Commclause
	}
	return nil
}

func (m *Foo2) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *Foo2) GetCompositelit() *CompositeLit {
	if m != nil {
		return m.Compositelit
	}
	return nil
}

func (m *Foo2) GetDeclstmt() *DeclStmt {
	if m != nil {
		return m.Declstmt
	}
	return nil
}

func (m *Foo2) GetDeferstmt() *DeferStmt {
	if m != nil {
		return m.Deferstmt
	}
	return nil
}

func (m *Foo2) GetEllipsis() *Ellipsis {
	if m != nil {
		return m.Ellipsis
	}
	return nil
}

func (m *Foo2) GetEmptystmt() *EmptyStmt {
	if m != nil {
		return m.Emptystmt
	}
	return nil
}

func (m *Foo2) GetExprstmt() *ExprStmt {
	if m != nil {
		return m.Exprstmt
	}
	return nil
}

func (m *Foo2) GetField() *Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *Foo2) GetFieldlist() *FieldList {
	if m != nil {
		return m.Fieldlist
	}
	return nil
}

func (m *Foo2) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Foo2) GetForstmt() *ForStmt {
	if m != nil {
		return m.Forstmt
	}
	return nil
}

func (m *Foo2) GetFuncdecl() *FuncDecl {
	if m != nil {
		return m.Funcdecl
	}
	return nil
}

func (m *Foo2) GetFunclit() *FuncLit {
	if m != nil {
		return m.Funclit
	}
	return nil
}

func (m *Foo2) GetFunctype() *FuncType {
	if m != nil {
		return m.Functype
	}
	return nil
}

func (m *Foo2) GetGendecl() *GenDecl {
	if m != nil {
		return m.Gendecl
	}
	return nil
}

func (m *Foo2) GetGostmt() *GoStmt {
	if m != nil {
		return m.Gostmt
	}
	return nil
}

func (m *Foo2) GetIdent() *Ident {
	if m != nil {
		return m.Ident
	}
	return nil
}

func (m *Foo2) GetIfstmt() *IfStmt {
	if m != nil {
		return m.Ifstmt
	}
	return nil
}

func (m *Foo2) GetImportspec() *ImportSpec {
	if m != nil {
		return m.Importspec
	}
	return nil
}

func (m *Foo2) GetIncdecstmt() *IncDecStmt {
	if m != nil {
		return m.Incdecstmt
	}
	return nil
}

func (m *Foo2) GetIndexexpr() *IndexExpr {
	if m != nil {
		return m.Indexexpr
	}
	return nil
}

func (m *Foo2) GetInterfacetype() *InterfaceType {
	if m != nil {
		return m.Interfacetype
	}
	return nil
}

func (m *Foo2) GetIsexported() *IsExported {
	if m != nil {
		return m.Isexported
	}
	return nil
}

func (m *Foo2) GetKeyvalueexpr() *KeyValueExpr {
	if m != nil {
		return m.Keyvalueexpr
	}
	return nil
}

func (m *Foo2) GetLabeledstmt() *LabeledStmt {
	if m != nil {
		return m.Labeledstmt
	}
	return nil
}

func (m *Foo2) GetMaptype() *MapType {
	if m != nil {
		return m.Maptype
	}
	return nil
}

func (m *Foo2) GetNewident() *NewIdent {
	if m != nil {
		return m.Newident
	}
	return nil
}

func (m *Foo2) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *Foo2) GetParenexpr() *ParenExpr {
	if m != nil {
		return m.Parenexpr
	}
	return nil
}

func (m *Foo2) GetRangestmt() *RangeStmt {
	if m != nil {
		return m.Rangestmt
	}
	return nil
}

func (m *Foo2) GetReturnstmt() *ReturnStmt {
	if m != nil {
		return m.Returnstmt
	}
	return nil
}

func (m *Foo2) GetSelectstmt() *SelectStmt {
	if m != nil {
		return m.Selectstmt
	}
	return nil
}

func (m *Foo2) GetSelectorexpr() *SelectorExpr {
	if m != nil {
		return m.Selectorexpr
	}
	return nil
}

func (m *Foo2) GetSendstmt() *SendStmt {
	if m != nil {
		return m.Sendstmt
	}
	return nil
}

func (m *Foo2) GetSliceexpr() *SliceExpr {
	if m != nil {
		return m.Sliceexpr
	}
	return nil
}

func (m *Foo2) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Foo2) GetStarexpr() *StarExpr {
	if m != nil {
		return m.Starexpr
	}
	return nil
}

func (m *Foo2) GetStructtype() *StructType {
	if m != nil {
		return m.Structtype
	}
	return nil
}

func (m *Foo2) GetSwitchstmt() *SwitchStmt {
	if m != nil {
		return m.Switchstmt
	}
	return nil
}

func (m *Foo2) GetTypeassertexpr() *TypeAssertExpr {
	if m != nil {
		return m.Typeassertexpr
	}
	return nil
}

func (m *Foo2) GetTypespec() *TypeSpec {
	if m != nil {
		return m.Typespec
	}
	return nil
}

func (m *Foo2) GetTypeswitchstmt() *TypeSwitchStmt {
	if m != nil {
		return m.Typeswitchstmt
	}
	return nil
}

func (m *Foo2) GetUnaryexpr() *UnaryExpr {
	if m != nil {
		return m.Unaryexpr
	}
	return nil
}

func (m *Foo2) GetValuespec() *ValueSpec {
	if m != nil {
		return m.Valuespec
	}
	return nil
}

func (m *Foo2) GetCommentgroup() *CommentGroup {
	if m != nil {
		return m.Commentgroup
	}
	return nil
}

func (m *Foo2) GetAssignstmt() *AssignStmt {
	if m != nil {
		return m.Assignstmt
	}
	return nil
}

func (m *Foo2) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Foo2) GetArraytype() *ArrayType {
	if m != nil {
		return m.Arraytype
	}
	return nil
}

func (m *Foo2) GetDeferred() *Deferred {
	if m != nil {
		return m.Deferred
	}
	return nil
}

type AssignStmt struct {
	Lhs    []*Expr `protobuf:"bytes,1,rep,name=Lhs,json=lhs" json:"Lhs,omitempty"`
	TokPos *Foo3   `protobuf:"bytes,2,opt,name=TokPos,json=tokPos" json:"TokPos,omitempty"`
	// position of Tok
	Tok *Foo3 `protobuf:"bytes,3,opt,name=Tok,json=tok" json:"Tok,omitempty"`
	// assignment token, DEFINE
	Rhs              []*Expr `protobuf:"bytes,4,rep,name=Rhs,json=rhs" json:"Rhs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AssignStmt) Reset()                    { *m = AssignStmt{} }
func (m *AssignStmt) String() string            { return proto.CompactTextString(m) }
func (*AssignStmt) ProtoMessage()               {}
func (*AssignStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AssignStmt) GetLhs() []*Expr {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *AssignStmt) GetTokPos() *Foo3 {
	if m != nil {
		return m.TokPos
	}
	return nil
}

func (m *AssignStmt) GetTok() *Foo3 {
	if m != nil {
		return m.Tok
	}
	return nil
}

func (m *AssignStmt) GetRhs() []*Expr {
	if m != nil {
		return m.Rhs
	}
	return nil
}

type BadExpr struct {
	From             *Foo2  `protobuf:"bytes,1,opt,name=From,json=from" json:"From,omitempty"`
	To               *Foo2  `protobuf:"bytes,2,opt,name=To,json=to" json:"To,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BadExpr) Reset()                    { *m = BadExpr{} }
func (m *BadExpr) String() string            { return proto.CompactTextString(m) }
func (*BadExpr) ProtoMessage()               {}
func (*BadExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BadExpr) GetFrom() *Foo2 {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BadExpr) GetTo() *Foo2 {
	if m != nil {
		return m.To
	}
	return nil
}

// A BadStmt node is a placeholder for statements containing
// syntax errors for which no correct statement nodes can be
// created.
type BadStmt struct {
	From             *Foo2  `protobuf:"bytes,1,opt,name=From,json=from" json:"From,omitempty"`
	To               *Foo2  `protobuf:"bytes,2,opt,name=To,json=to" json:"To,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BadStmt) Reset()                    { *m = BadStmt{} }
func (m *BadStmt) String() string            { return proto.CompactTextString(m) }
func (*BadStmt) ProtoMessage()               {}
func (*BadStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BadStmt) GetFrom() *Foo2 {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BadStmt) GetTo() *Foo2 {
	if m != nil {
		return m.To
	}
	return nil
}

type BasicLit struct {
	ValuePos         *Foo3  `protobuf:"bytes,1,opt,name=ValuePos,json=valuePos" json:"ValuePos,omitempty"`
	Kind             *Foo3  `protobuf:"bytes,2,opt,name=Kind,json=kind" json:"Kind,omitempty"`
	Value            *Foo3  `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BasicLit) Reset()                    { *m = BasicLit{} }
func (m *BasicLit) String() string            { return proto.CompactTextString(m) }
func (*BasicLit) ProtoMessage()               {}
func (*BasicLit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BasicLit) GetValuePos() *Foo3 {
	if m != nil {
		return m.ValuePos
	}
	return nil
}

func (m *BasicLit) GetKind() *Foo3 {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *BasicLit) GetValue() *Foo3 {
	if m != nil {
		return m.Value
	}
	return nil
}

// A BinaryExpr node represents a binary expression.
type BinaryExpr struct {
	X *Foo2 `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	// left operand
	OpPos *Foo3 `protobuf:"bytes,2,opt,name=OpPos,json=opPos" json:"OpPos,omitempty"`
	// position of Op
	Op *Foo3 `protobuf:"bytes,3,opt,name=Op,json=op" json:"Op,omitempty"`
	// operator
	Y                *Foo2  `protobuf:"bytes,4,opt,name=Y,json=y" json:"Y,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BinaryExpr) Reset()                    { *m = BinaryExpr{} }
func (m *BinaryExpr) String() string            { return proto.CompactTextString(m) }
func (*BinaryExpr) ProtoMessage()               {}
func (*BinaryExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BinaryExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *BinaryExpr) GetOpPos() *Foo3 {
	if m != nil {
		return m.OpPos
	}
	return nil
}

func (m *BinaryExpr) GetOp() *Foo3 {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *BinaryExpr) GetY() *Foo2 {
	if m != nil {
		return m.Y
	}
	return nil
}

type BlockStmt struct {
	Lbrace           *Foo3   `protobuf:"bytes,1,opt,name=Lbrace,json=lbrace" json:"Lbrace,omitempty"`
	List             []*Stmt `protobuf:"bytes,2,rep,name=List,json=list" json:"List,omitempty"`
	Rbrace           *Foo3   `protobuf:"bytes,3,opt,name=Rbrace,json=rbrace" json:"Rbrace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BlockStmt) Reset()                    { *m = BlockStmt{} }
func (m *BlockStmt) String() string            { return proto.CompactTextString(m) }
func (*BlockStmt) ProtoMessage()               {}
func (*BlockStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BlockStmt) GetLbrace() *Foo3 {
	if m != nil {
		return m.Lbrace
	}
	return nil
}

func (m *BlockStmt) GetList() []*Stmt {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BlockStmt) GetRbrace() *Foo3 {
	if m != nil {
		return m.Rbrace
	}
	return nil
}

// A BranchStmt node represents a break, continue, goto,
// or fallthrough statement.
type BranchStmt struct {
	TokPos *Foo3 `protobuf:"bytes,1,opt,name=TokPos,json=tokPos" json:"TokPos,omitempty"`
	Tok    *Foo3 `protobuf:"bytes,2,opt,name=Tok,json=tok" json:"Tok,omitempty"`
	// keyword token (BREAK, CONTINUE, GOTO, FALLTHROUGH)
	Label            *Ident `protobuf:"bytes,3,opt,name=Label,json=label" json:"Label,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BranchStmt) Reset()                    { *m = BranchStmt{} }
func (m *BranchStmt) String() string            { return proto.CompactTextString(m) }
func (*BranchStmt) ProtoMessage()               {}
func (*BranchStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BranchStmt) GetTokPos() *Foo3 {
	if m != nil {
		return m.TokPos
	}
	return nil
}

func (m *BranchStmt) GetTok() *Foo3 {
	if m != nil {
		return m.Tok
	}
	return nil
}

func (m *BranchStmt) GetLabel() *Ident {
	if m != nil {
		return m.Label
	}
	return nil
}

// A CallExpr node represents an expression followed by an argument list.
type CallExpr struct {
	Fun *Foo2 `protobuf:"bytes,1,opt,name=Fun,json=fun" json:"Fun,omitempty"`
	// function expression
	Lparen           *Foo3   `protobuf:"bytes,2,opt,name=Lparen,json=lparen" json:"Lparen,omitempty"`
	Args             []*Expr `protobuf:"bytes,3,rep,name=Args,json=args" json:"Args,omitempty"`
	Ellipsis         *Foo3   `protobuf:"bytes,4,opt,name=Ellipsis,json=ellipsis" json:"Ellipsis,omitempty"`
	Rparen           *Foo3   `protobuf:"bytes,5,opt,name=Rparen,json=rparen" json:"Rparen,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CallExpr) Reset()                    { *m = CallExpr{} }
func (m *CallExpr) String() string            { return proto.CompactTextString(m) }
func (*CallExpr) ProtoMessage()               {}
func (*CallExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CallExpr) GetFun() *Foo2 {
	if m != nil {
		return m.Fun
	}
	return nil
}

func (m *CallExpr) GetLparen() *Foo3 {
	if m != nil {
		return m.Lparen
	}
	return nil
}

func (m *CallExpr) GetArgs() []*Expr {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CallExpr) GetEllipsis() *Foo3 {
	if m != nil {
		return m.Ellipsis
	}
	return nil
}

func (m *CallExpr) GetRparen() *Foo3 {
	if m != nil {
		return m.Rparen
	}
	return nil
}

// A CaseClause represents a case of an expression or type switch statement.
type CaseClause struct {
	Case *Foo3   `protobuf:"bytes,1,opt,name=Case,json=case" json:"Case,omitempty"`
	List []*Expr `protobuf:"bytes,2,rep,name=List,json=list" json:"List,omitempty"`
	// list of expressions or types; nil means default case
	Colon            *Foo3   `protobuf:"bytes,3,opt,name=Colon,json=colon" json:"Colon,omitempty"`
	Body             []*Stmt `protobuf:"bytes,4,rep,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CaseClause) Reset()                    { *m = CaseClause{} }
func (m *CaseClause) String() string            { return proto.CompactTextString(m) }
func (*CaseClause) ProtoMessage()               {}
func (*CaseClause) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CaseClause) GetCase() *Foo3 {
	if m != nil {
		return m.Case
	}
	return nil
}

func (m *CaseClause) GetList() []*Expr {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CaseClause) GetColon() *Foo3 {
	if m != nil {
		return m.Colon
	}
	return nil
}

func (m *CaseClause) GetBody() []*Stmt {
	if m != nil {
		return m.Body
	}
	return nil
}

// A CommClause node represents a case of a select statement.
type CommClause struct {
	Case *Foo2 `protobuf:"bytes,1,opt,name=Case,json=case" json:"Case,omitempty"`
	// position of "case" or "default" keyword
	Comm *Foo2 `protobuf:"bytes,2,opt,name=Comm,json=comm" json:"Comm,omitempty"`
	// send or receive statement; nil means default case
	Colon *Foo2 `protobuf:"bytes,3,opt,name=Colon,json=colon" json:"Colon,omitempty"`
	// position of ":"
	Body             []*Stmt `protobuf:"bytes,4,rep,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommClause) Reset()                    { *m = CommClause{} }
func (m *CommClause) String() string            { return proto.CompactTextString(m) }
func (*CommClause) ProtoMessage()               {}
func (*CommClause) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CommClause) GetCase() *Foo2 {
	if m != nil {
		return m.Case
	}
	return nil
}

func (m *CommClause) GetComm() *Foo2 {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *CommClause) GetColon() *Foo2 {
	if m != nil {
		return m.Colon
	}
	return nil
}

func (m *CommClause) GetBody() []*Stmt {
	if m != nil {
		return m.Body
	}
	return nil
}

// A CompositeLit node represents a composite literal.
type CompositeLit struct {
	Type *Foo2 `protobuf:"bytes,1,opt,name=Type,json=type" json:"Type,omitempty"`
	// literal type; or nil
	Lbrace *Foo3   `protobuf:"bytes,2,opt,name=Lbrace,json=lbrace" json:"Lbrace,omitempty"`
	Elts   []*Expr `protobuf:"bytes,3,rep,name=Elts,json=elts" json:"Elts,omitempty"`
	// []list of composite elements; or nil
	Rbrace           *Foo3  `protobuf:"bytes,4,opt,name=Rbrace,json=rbrace" json:"Rbrace,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CompositeLit) Reset()                    { *m = CompositeLit{} }
func (m *CompositeLit) String() string            { return proto.CompactTextString(m) }
func (*CompositeLit) ProtoMessage()               {}
func (*CompositeLit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CompositeLit) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CompositeLit) GetLbrace() *Foo3 {
	if m != nil {
		return m.Lbrace
	}
	return nil
}

func (m *CompositeLit) GetElts() []*Expr {
	if m != nil {
		return m.Elts
	}
	return nil
}

func (m *CompositeLit) GetRbrace() *Foo3 {
	if m != nil {
		return m.Rbrace
	}
	return nil
}

// A DeferStmt node represents a defer statement.
type DeferStmt struct {
	Defer            *Foo3     `protobuf:"bytes,1,opt,name=Defer,json=defer" json:"Defer,omitempty"`
	Call             *CallExpr `protobuf:"bytes,2,opt,name=Call,json=call" json:"Call,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *DeferStmt) Reset()                    { *m = DeferStmt{} }
func (m *DeferStmt) String() string            { return proto.CompactTextString(m) }
func (*DeferStmt) ProtoMessage()               {}
func (*DeferStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeferStmt) GetDefer() *Foo3 {
	if m != nil {
		return m.Defer
	}
	return nil
}

func (m *DeferStmt) GetCall() *CallExpr {
	if m != nil {
		return m.Call
	}
	return nil
}

// deferred
type Deferred struct {
	Id *string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// Data  Foo2
	// Data  int64
	Type             *NodeType `protobuf:"varint,2,req,name=type,enum=github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType" json:"type,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Deferred) Reset()                    { *m = Deferred{} }
func (m *Deferred) String() string            { return proto.CompactTextString(m) }
func (*Deferred) ProtoMessage()               {}
func (*Deferred) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Deferred) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Deferred) GetType() NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NodeType_ARRAYTYPE
}

// An Ellipsis node stands for the "..." type in a
// parameter list or the "..." length in an array type.
type Ellipsis struct {
	Ellipsis *Foo2 `protobuf:"bytes,1,opt,name=Ellipsis,json=ellipsis" json:"Ellipsis,omitempty"`
	// position of "..."
	Elt              *Foo2  `protobuf:"bytes,2,opt,name=Elt,json=elt" json:"Elt,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Ellipsis) Reset()                    { *m = Ellipsis{} }
func (m *Ellipsis) String() string            { return proto.CompactTextString(m) }
func (*Ellipsis) ProtoMessage()               {}
func (*Ellipsis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Ellipsis) GetEllipsis() *Foo2 {
	if m != nil {
		return m.Ellipsis
	}
	return nil
}

func (m *Ellipsis) GetElt() *Foo2 {
	if m != nil {
		return m.Elt
	}
	return nil
}

// An EmptyStmt node represents an empty statement.
// The "position" of the empty statement is the position
// of the immediately following (explicit or implicit) semicolon.
type EmptyStmt struct {
	Semicolon *Foo2 `protobuf:"bytes,1,opt,name=Semicolon,json=semicolon" json:"Semicolon,omitempty"`
	// position of following ";"
	Implicit         *bool  `protobuf:"varint,2,opt,name=Implicit,json=implicit" json:"Implicit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EmptyStmt) Reset()                    { *m = EmptyStmt{} }
func (m *EmptyStmt) String() string            { return proto.CompactTextString(m) }
func (*EmptyStmt) ProtoMessage()               {}
func (*EmptyStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *EmptyStmt) GetSemicolon() *Foo2 {
	if m != nil {
		return m.Semicolon
	}
	return nil
}

func (m *EmptyStmt) GetImplicit() bool {
	if m != nil && m.Implicit != nil {
		return *m.Implicit
	}
	return false
}

type Field struct {
	Names            []*Ident `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
	Type             *Foo2    `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	Tag              *Foo2    `protobuf:"bytes,3,opt,name=Tag,json=tag" json:"Tag,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Field) GetNames() []*Ident {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Field) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Field) GetTag() *Foo2 {
	if m != nil {
		return m.Tag
	}
	return nil
}

type FieldList struct {
	Opening          *Foo3    `protobuf:"bytes,1,opt,name=Opening,json=opening" json:"Opening,omitempty"`
	List             []*Field `protobuf:"bytes,2,rep,name=List,json=list" json:"List,omitempty"`
	Closing          *Foo3    `protobuf:"bytes,3,opt,name=Closing,json=closing" json:"Closing,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FieldList) Reset()                    { *m = FieldList{} }
func (m *FieldList) String() string            { return proto.CompactTextString(m) }
func (*FieldList) ProtoMessage()               {}
func (*FieldList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *FieldList) GetOpening() *Foo3 {
	if m != nil {
		return m.Opening
	}
	return nil
}

func (m *FieldList) GetList() []*Field {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FieldList) GetClosing() *Foo3 {
	if m != nil {
		return m.Closing
	}
	return nil
}

type File struct {
	Package          *Foo3           `protobuf:"bytes,1,opt,name=Package,json=package" json:"Package,omitempty"`
	Name             *Foo3           `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Decls            []*Decl         `protobuf:"bytes,3,rep,name=Decls,json=decls" json:"Decls,omitempty"`
	Scope            *Foo2           `protobuf:"bytes,4,opt,name=Scope,json=scope" json:"Scope,omitempty"`
	Imports          []*ImportSpec   `protobuf:"bytes,5,rep,name=Imports,json=imports" json:"Imports,omitempty"`
	Unresolved       []*Ident        `protobuf:"bytes,6,rep,name=Unresolved,json=unresolved" json:"Unresolved,omitempty"`
	Comments         []*CommentGroup `protobuf:"bytes,7,rep,name=Comments,json=comments" json:"Comments,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *File) GetPackage() *Foo3 {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *File) GetName() *Foo3 {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *File) GetDecls() []*Decl {
	if m != nil {
		return m.Decls
	}
	return nil
}

func (m *File) GetScope() *Foo2 {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *File) GetImports() []*ImportSpec {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *File) GetUnresolved() []*Ident {
	if m != nil {
		return m.Unresolved
	}
	return nil
}

func (m *File) GetComments() []*CommentGroup {
	if m != nil {
		return m.Comments
	}
	return nil
}

// A ForStmt represents a for statement.
type ForStmt struct {
	For *Foo3 `protobuf:"bytes,1,opt,name=For,json=for" json:"For,omitempty"`
	// position of "for" keyword
	Init *Foo2 `protobuf:"bytes,2,opt,name=Init,json=init" json:"Init,omitempty"`
	// initialization statement; or nil
	Cond *Foo2 `protobuf:"bytes,3,opt,name=Cond,json=cond" json:"Cond,omitempty"`
	// condition; or nil
	Post *Foo2 `protobuf:"bytes,4,opt,name=Post,json=post" json:"Post,omitempty"`
	// post iteration statement; or nil
	Body             *Foo2  `protobuf:"bytes,5,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ForStmt) Reset()                    { *m = ForStmt{} }
func (m *ForStmt) String() string            { return proto.CompactTextString(m) }
func (*ForStmt) ProtoMessage()               {}
func (*ForStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ForStmt) GetFor() *Foo3 {
	if m != nil {
		return m.For
	}
	return nil
}

func (m *ForStmt) GetInit() *Foo2 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *ForStmt) GetCond() *Foo2 {
	if m != nil {
		return m.Cond
	}
	return nil
}

func (m *ForStmt) GetPost() *Foo2 {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *ForStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

type FuncDecl struct {
	Recv             *Foo2  `protobuf:"bytes,1,opt,name=Recv,json=recv" json:"Recv,omitempty"`
	Name             *Foo3  `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Type             *Foo2  `protobuf:"bytes,3,opt,name=Type,json=type" json:"Type,omitempty"`
	Body             *Foo2  `protobuf:"bytes,4,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FuncDecl) Reset()                    { *m = FuncDecl{} }
func (m *FuncDecl) String() string            { return proto.CompactTextString(m) }
func (*FuncDecl) ProtoMessage()               {}
func (*FuncDecl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *FuncDecl) GetRecv() *Foo2 {
	if m != nil {
		return m.Recv
	}
	return nil
}

func (m *FuncDecl) GetName() *Foo3 {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FuncDecl) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FuncDecl) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

// A FuncLit node represents a function literal.
type FuncLit struct {
	Type *FuncType `protobuf:"bytes,1,opt,name=Type,json=type" json:"Type,omitempty"`
	// function type
	Body             *BlockStmt `protobuf:"bytes,2,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FuncLit) Reset()                    { *m = FuncLit{} }
func (m *FuncLit) String() string            { return proto.CompactTextString(m) }
func (*FuncLit) ProtoMessage()               {}
func (*FuncLit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *FuncLit) GetType() *FuncType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FuncLit) GetBody() *BlockStmt {
	if m != nil {
		return m.Body
	}
	return nil
}

type FuncType struct {
	Func             *Foo3      `protobuf:"bytes,1,opt,name=Func,json=func" json:"Func,omitempty"`
	Params           *Foo2      `protobuf:"bytes,2,opt,name=Params,json=params" json:"Params,omitempty"`
	Results          *FieldList `protobuf:"bytes,3,opt,name=Results,json=results" json:"Results,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FuncType) Reset()                    { *m = FuncType{} }
func (m *FuncType) String() string            { return proto.CompactTextString(m) }
func (*FuncType) ProtoMessage()               {}
func (*FuncType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *FuncType) GetFunc() *Foo3 {
	if m != nil {
		return m.Func
	}
	return nil
}

func (m *FuncType) GetParams() *Foo2 {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *FuncType) GetResults() *FieldList {
	if m != nil {
		return m.Results
	}
	return nil
}

type GenDecl struct {
	TokPos           *Foo3   `protobuf:"bytes,1,opt,name=TokPos,json=tokPos" json:"TokPos,omitempty"`
	Tok              *Foo3   `protobuf:"bytes,2,opt,name=Tok,json=tok" json:"Tok,omitempty"`
	Lparen           *Foo3   `protobuf:"bytes,3,opt,name=Lparen,json=lparen" json:"Lparen,omitempty"`
	Specs            []*Spec `protobuf:"bytes,4,rep,name=Specs,json=specs" json:"Specs,omitempty"`
	Rparen           *Foo3   `protobuf:"bytes,5,opt,name=Rparen,json=rparen" json:"Rparen,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GenDecl) Reset()                    { *m = GenDecl{} }
func (m *GenDecl) String() string            { return proto.CompactTextString(m) }
func (*GenDecl) ProtoMessage()               {}
func (*GenDecl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GenDecl) GetTokPos() *Foo3 {
	if m != nil {
		return m.TokPos
	}
	return nil
}

func (m *GenDecl) GetTok() *Foo3 {
	if m != nil {
		return m.Tok
	}
	return nil
}

func (m *GenDecl) GetLparen() *Foo3 {
	if m != nil {
		return m.Lparen
	}
	return nil
}

func (m *GenDecl) GetSpecs() []*Spec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *GenDecl) GetRparen() *Foo3 {
	if m != nil {
		return m.Rparen
	}
	return nil
}

// A GoStmt node represents a go statement.
type GoStmt struct {
	Go *Foo2 `protobuf:"bytes,1,opt,name=Go,json=go" json:"Go,omitempty"`
	// position of "go" keyword
	Call             *CallExpr `protobuf:"bytes,2,opt,name=Call,json=call" json:"Call,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *GoStmt) Reset()                    { *m = GoStmt{} }
func (m *GoStmt) String() string            { return proto.CompactTextString(m) }
func (*GoStmt) ProtoMessage()               {}
func (*GoStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GoStmt) GetGo() *Foo2 {
	if m != nil {
		return m.Go
	}
	return nil
}

func (m *GoStmt) GetCall() *CallExpr {
	if m != nil {
		return m.Call
	}
	return nil
}

type Ident struct {
	NamePos          *Foo3   `protobuf:"bytes,1,opt,name=NamePos,json=namePos" json:"NamePos,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Obj              *Foo2   `protobuf:"bytes,3,opt,name=Obj,json=obj" json:"Obj,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ident) Reset()                    { *m = Ident{} }
func (m *Ident) String() string            { return proto.CompactTextString(m) }
func (*Ident) ProtoMessage()               {}
func (*Ident) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *Ident) GetNamePos() *Foo3 {
	if m != nil {
		return m.NamePos
	}
	return nil
}

func (m *Ident) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ident) GetObj() *Foo2 {
	if m != nil {
		return m.Obj
	}
	return nil
}

// An IfStmt node represents an if statement.
type IfStmt struct {
	If   *Foo3 `protobuf:"bytes,1,opt,name=If,json=if" json:"If,omitempty"`
	Init *Foo2 `protobuf:"bytes,2,opt,name=Init,json=init" json:"Init,omitempty"`
	// initialization statement; or nil
	Cond *Foo2 `protobuf:"bytes,3,opt,name=Cond,json=cond" json:"Cond,omitempty"`
	// condition
	Body             *Foo2  `protobuf:"bytes,4,opt,name=Body,json=body" json:"Body,omitempty"`
	Else             *Foo2  `protobuf:"bytes,5,opt,name=Else,json=else" json:"Else,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IfStmt) Reset()                    { *m = IfStmt{} }
func (m *IfStmt) String() string            { return proto.CompactTextString(m) }
func (*IfStmt) ProtoMessage()               {}
func (*IfStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *IfStmt) GetIf() *Foo3 {
	if m != nil {
		return m.If
	}
	return nil
}

func (m *IfStmt) GetInit() *Foo2 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *IfStmt) GetCond() *Foo2 {
	if m != nil {
		return m.Cond
	}
	return nil
}

func (m *IfStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *IfStmt) GetElse() *Foo2 {
	if m != nil {
		return m.Else
	}
	return nil
}

// An IncDecStmt node represents an increment or decrement statement.
type IncDecStmt struct {
	X      *Foo2 `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	TokPos *Foo3 `protobuf:"bytes,2,opt,name=TokPos,json=tokPos" json:"TokPos,omitempty"`
	// position of Tok
	Tok              *Foo3  `protobuf:"bytes,3,opt,name=Tok,json=tok" json:"Tok,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IncDecStmt) Reset()                    { *m = IncDecStmt{} }
func (m *IncDecStmt) String() string            { return proto.CompactTextString(m) }
func (*IncDecStmt) ProtoMessage()               {}
func (*IncDecStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *IncDecStmt) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *IncDecStmt) GetTokPos() *Foo3 {
	if m != nil {
		return m.TokPos
	}
	return nil
}

func (m *IncDecStmt) GetTok() *Foo3 {
	if m != nil {
		return m.Tok
	}
	return nil
}

// An IndexExpr node represents an expression followed by an index.
type IndexExpr struct {
	X *Foo2 `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	// expression
	Lbrack *Foo3 `protobuf:"bytes,2,opt,name=Lbrack,json=lbrack" json:"Lbrack,omitempty"`
	Index  *Foo2 `protobuf:"bytes,3,opt,name=Index,json=index" json:"Index,omitempty"`
	// index expression
	Rbrack           *Foo3  `protobuf:"bytes,4,opt,name=Rbrack,json=rbrack" json:"Rbrack,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IndexExpr) Reset()                    { *m = IndexExpr{} }
func (m *IndexExpr) String() string            { return proto.CompactTextString(m) }
func (*IndexExpr) ProtoMessage()               {}
func (*IndexExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *IndexExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *IndexExpr) GetLbrack() *Foo3 {
	if m != nil {
		return m.Lbrack
	}
	return nil
}

func (m *IndexExpr) GetIndex() *Foo2 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *IndexExpr) GetRbrack() *Foo3 {
	if m != nil {
		return m.Rbrack
	}
	return nil
}

type InterfaceType struct {
	Interface        *Foo3      `protobuf:"bytes,1,opt,name=Interface,json=interface" json:"Interface,omitempty"`
	Methods          *FieldList `protobuf:"bytes,2,opt,name=Methods,json=methods" json:"Methods,omitempty"`
	Incomplete       *bool      `protobuf:"varint,3,opt,name=Incomplete,json=incomplete" json:"Incomplete,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *InterfaceType) Reset()                    { *m = InterfaceType{} }
func (m *InterfaceType) String() string            { return proto.CompactTextString(m) }
func (*InterfaceType) ProtoMessage()               {}
func (*InterfaceType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *InterfaceType) GetInterface() *Foo3 {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *InterfaceType) GetMethods() *FieldList {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *InterfaceType) GetIncomplete() bool {
	if m != nil && m.Incomplete != nil {
		return *m.Incomplete
	}
	return false
}

// A KeyValueExpr node represents (key : value) pairs
// in composite literals.
type KeyValueExpr struct {
	Key   *Foo2 `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	Colon *Foo2 `protobuf:"bytes,2,opt,name=Colon,json=colon" json:"Colon,omitempty"`
	// position of ":"
	Value            *Foo2  `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeyValueExpr) Reset()                    { *m = KeyValueExpr{} }
func (m *KeyValueExpr) String() string            { return proto.CompactTextString(m) }
func (*KeyValueExpr) ProtoMessage()               {}
func (*KeyValueExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *KeyValueExpr) GetKey() *Foo2 {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValueExpr) GetColon() *Foo2 {
	if m != nil {
		return m.Colon
	}
	return nil
}

func (m *KeyValueExpr) GetValue() *Foo2 {
	if m != nil {
		return m.Value
	}
	return nil
}

// A LabeledStmt node represents a labeled statement.
type LabeledStmt struct {
	Label *Ident `protobuf:"bytes,1,opt,name=Label,json=label" json:"Label,omitempty"`
	Colon *Foo2  `protobuf:"bytes,2,opt,name=Colon,json=colon" json:"Colon,omitempty"`
	// position of ":"
	Stmt             *Foo2  `protobuf:"bytes,3,opt,name=Stmt,json=stmt" json:"Stmt,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LabeledStmt) Reset()                    { *m = LabeledStmt{} }
func (m *LabeledStmt) String() string            { return proto.CompactTextString(m) }
func (*LabeledStmt) ProtoMessage()               {}
func (*LabeledStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *LabeledStmt) GetLabel() *Ident {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *LabeledStmt) GetColon() *Foo2 {
	if m != nil {
		return m.Colon
	}
	return nil
}

func (m *LabeledStmt) GetStmt() *Foo2 {
	if m != nil {
		return m.Stmt
	}
	return nil
}

type MapType struct {
	Map              *Foo3  `protobuf:"bytes,1,opt,name=Map,json=map" json:"Map,omitempty"`
	Key              *Foo2  `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
	Value            *Foo2  `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MapType) Reset()                    { *m = MapType{} }
func (m *MapType) String() string            { return proto.CompactTextString(m) }
func (*MapType) ProtoMessage()               {}
func (*MapType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *MapType) GetMap() *Foo3 {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *MapType) GetKey() *Foo2 {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapType) GetValue() *Foo2 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Object struct {
	Deferred         *Deferred `protobuf:"bytes,1,opt,name=Deferred,json=deferred" json:"Deferred,omitempty"`
	Kind             *Foo3     `protobuf:"bytes,2,opt,name=Kind,json=kind" json:"Kind,omitempty"`
	Name             *Foo3     `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Decl             *Foo2     `protobuf:"bytes,4,opt,name=Decl,json=decl" json:"Decl,omitempty"`
	Data             *Foo3     `protobuf:"bytes,5,opt,name=Data,json=data" json:"Data,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *Object) GetDeferred() *Deferred {
	if m != nil {
		return m.Deferred
	}
	return nil
}

func (m *Object) GetKind() *Foo3 {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Object) GetName() *Foo3 {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Object) GetDecl() *Foo2 {
	if m != nil {
		return m.Decl
	}
	return nil
}

func (m *Object) GetData() *Foo3 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Package struct {
	Name *string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	// package name
	Scope *Foo2 `protobuf:"bytes,2,opt,name=Scope,json=scope" json:"Scope,omitempty"`
	// package scope across all files
	Imports map[string]*Object `protobuf:"bytes,3,rep,name=Imports,json=imports" json:"Imports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// map of package id -> package object
	Files            map[string]*File `protobuf:"bytes,4,rep,name=Files,json=files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *Package) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Package) GetScope() *Foo2 {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *Package) GetImports() map[string]*Object {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *Package) GetFiles() map[string]*File {
	if m != nil {
		return m.Files
	}
	return nil
}

// A ParenFoo2 node represents a parenthesized expression.
type ParenExpr struct {
	Lparen *Foo3 `protobuf:"bytes,1,opt,name=Lparen,json=lparen" json:"Lparen,omitempty"`
	X      *Foo2 `protobuf:"bytes,2,opt,name=X,json=x" json:"X,omitempty"`
	// parenthesized expression
	Rparen           *Foo3  `protobuf:"bytes,3,opt,name=Rparen,json=rparen" json:"Rparen,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ParenExpr) Reset()                    { *m = ParenExpr{} }
func (m *ParenExpr) String() string            { return proto.CompactTextString(m) }
func (*ParenExpr) ProtoMessage()               {}
func (*ParenExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ParenExpr) GetLparen() *Foo3 {
	if m != nil {
		return m.Lparen
	}
	return nil
}

func (m *ParenExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ParenExpr) GetRparen() *Foo3 {
	if m != nil {
		return m.Rparen
	}
	return nil
}

// A RangeStmt represents a for statement with a range clause.
type RangeStmt struct {
	For   *Foo3 `protobuf:"bytes,1,opt,name=For,json=for" json:"For,omitempty"`
	Key   *Foo2 `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
	Value *Foo2 `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	// Key, Value may be nil
	TokPos *Foo3 `protobuf:"bytes,4,opt,name=TokPos,json=tokPos" json:"TokPos,omitempty"`
	Tok    *Foo3 `protobuf:"bytes,5,opt,name=Tok,json=tok" json:"Tok,omitempty"`
	// ILLEGAL if Key == nil, ASSIGN, DEFINE
	X *Foo2 `protobuf:"bytes,6,opt,name=X,json=x" json:"X,omitempty"`
	// Expr        // value to range over
	Body             *Foo2  `protobuf:"bytes,7,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RangeStmt) Reset()                    { *m = RangeStmt{} }
func (m *RangeStmt) String() string            { return proto.CompactTextString(m) }
func (*RangeStmt) ProtoMessage()               {}
func (*RangeStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *RangeStmt) GetFor() *Foo3 {
	if m != nil {
		return m.For
	}
	return nil
}

func (m *RangeStmt) GetKey() *Foo2 {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RangeStmt) GetValue() *Foo2 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RangeStmt) GetTokPos() *Foo3 {
	if m != nil {
		return m.TokPos
	}
	return nil
}

func (m *RangeStmt) GetTok() *Foo3 {
	if m != nil {
		return m.Tok
	}
	return nil
}

func (m *RangeStmt) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *RangeStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

type Scope struct {
	Objects          map[string]*Object `protobuf:"bytes,1,rep,name=Objects,json=objects" json:"Objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Scope) Reset()                    { *m = Scope{} }
func (m *Scope) String() string            { return proto.CompactTextString(m) }
func (*Scope) ProtoMessage()               {}
func (*Scope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *Scope) GetObjects() map[string]*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

// An SelectStmt node represents a select statement.
type SelectStmt struct {
	Select *Foo2 `protobuf:"bytes,1,opt,name=Select,json=select" json:"Select,omitempty"`
	// position of "select" keyword
	Body             *Foo2  `protobuf:"bytes,2,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SelectStmt) Reset()                    { *m = SelectStmt{} }
func (m *SelectStmt) String() string            { return proto.CompactTextString(m) }
func (*SelectStmt) ProtoMessage()               {}
func (*SelectStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *SelectStmt) GetSelect() *Foo2 {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *SelectStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

type SelectorExpr struct {
	X                *Foo2  `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	Sel              *Foo2  `protobuf:"bytes,2,opt,name=Sel,json=sel" json:"Sel,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SelectorExpr) Reset()                    { *m = SelectorExpr{} }
func (m *SelectorExpr) String() string            { return proto.CompactTextString(m) }
func (*SelectorExpr) ProtoMessage()               {}
func (*SelectorExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *SelectorExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SelectorExpr) GetSel() *Foo2 {
	if m != nil {
		return m.Sel
	}
	return nil
}

// A SendStmt node represents a send statement.
type SendStmt struct {
	Chan  *Foo2 `protobuf:"bytes,1,opt,name=Chan,json=chan" json:"Chan,omitempty"`
	Arrow *Foo2 `protobuf:"bytes,2,opt,name=Arrow,json=arrow" json:"Arrow,omitempty"`
	// position of "<-"
	Value            *Foo2  `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SendStmt) Reset()                    { *m = SendStmt{} }
func (m *SendStmt) String() string            { return proto.CompactTextString(m) }
func (*SendStmt) ProtoMessage()               {}
func (*SendStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *SendStmt) GetChan() *Foo2 {
	if m != nil {
		return m.Chan
	}
	return nil
}

func (m *SendStmt) GetArrow() *Foo2 {
	if m != nil {
		return m.Arrow
	}
	return nil
}

func (m *SendStmt) GetValue() *Foo2 {
	if m != nil {
		return m.Value
	}
	return nil
}

// An SliceExpr node represents an expression followed by slice indices.
type SliceExpr struct {
	X *Foo2 `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	// expression
	Lbrack *Foo3 `protobuf:"bytes,2,opt,name=Lbrack,json=lbrack" json:"Lbrack,omitempty"`
	Low    *Foo2 `protobuf:"bytes,3,opt,name=Low,json=low" json:"Low,omitempty"`
	// begin of slice range; or nil
	High *Foo2 `protobuf:"bytes,4,opt,name=High,json=high" json:"High,omitempty"`
	// end of slice range; or nil
	Max *Foo2 `protobuf:"bytes,5,opt,name=Max,json=max" json:"Max,omitempty"`
	// maximum capacity of slice; or nil
	Slice3 *bool `protobuf:"varint,6,opt,name=Slice3,json=slice3" json:"Slice3,omitempty"`
	// true if 3-index slice (2 colons present)
	Rbrack           *Foo3  `protobuf:"bytes,7,opt,name=Rbrack,json=rbrack" json:"Rbrack,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SliceExpr) Reset()                    { *m = SliceExpr{} }
func (m *SliceExpr) String() string            { return proto.CompactTextString(m) }
func (*SliceExpr) ProtoMessage()               {}
func (*SliceExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *SliceExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SliceExpr) GetLbrack() *Foo3 {
	if m != nil {
		return m.Lbrack
	}
	return nil
}

func (m *SliceExpr) GetLow() *Foo2 {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *SliceExpr) GetHigh() *Foo2 {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *SliceExpr) GetMax() *Foo2 {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *SliceExpr) GetSlice3() bool {
	if m != nil && m.Slice3 != nil {
		return *m.Slice3
	}
	return false
}

func (m *SliceExpr) GetRbrack() *Foo3 {
	if m != nil {
		return m.Rbrack
	}
	return nil
}

type StructType struct {
	Struct           *Foo3      `protobuf:"bytes,1,opt,name=Struct,json=struct" json:"Struct,omitempty"`
	Fields           *FieldList `protobuf:"bytes,2,opt,name=Fields,json=fields" json:"Fields,omitempty"`
	Incomplete       *bool      `protobuf:"varint,3,opt,name=Incomplete,json=incomplete" json:"Incomplete,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *StructType) Reset()                    { *m = StructType{} }
func (m *StructType) String() string            { return proto.CompactTextString(m) }
func (*StructType) ProtoMessage()               {}
func (*StructType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *StructType) GetStruct() *Foo3 {
	if m != nil {
		return m.Struct
	}
	return nil
}

func (m *StructType) GetFields() *FieldList {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *StructType) GetIncomplete() bool {
	if m != nil && m.Incomplete != nil {
		return *m.Incomplete
	}
	return false
}

// A SwitchStmt node represents an expression switch statement.
type SwitchStmt struct {
	Switch *Foo3 `protobuf:"bytes,1,opt,name=Switch,json=switch" json:"Switch,omitempty"`
	// position of "switch" keyword
	Init *Foo2 `protobuf:"bytes,2,opt,name=Init,json=init" json:"Init,omitempty"`
	// initialization statement; or nil
	Tag *Foo2 `protobuf:"bytes,3,opt,name=Tag,json=tag" json:"Tag,omitempty"`
	// tag expression; or nil
	Body             *Foo2  `protobuf:"bytes,4,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SwitchStmt) Reset()                    { *m = SwitchStmt{} }
func (m *SwitchStmt) String() string            { return proto.CompactTextString(m) }
func (*SwitchStmt) ProtoMessage()               {}
func (*SwitchStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *SwitchStmt) GetSwitch() *Foo3 {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *SwitchStmt) GetInit() *Foo2 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *SwitchStmt) GetTag() *Foo2 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *SwitchStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

type ArrayType struct {
	Lbrack           *Foo3  `protobuf:"bytes,1,req,name=Lbrack,json=lbrack" json:"Lbrack,omitempty"`
	Elt              *Foo2  `protobuf:"bytes,2,req,name=Elt,json=elt" json:"Elt,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArrayType) Reset()                    { *m = ArrayType{} }
func (m *ArrayType) String() string            { return proto.CompactTextString(m) }
func (*ArrayType) ProtoMessage()               {}
func (*ArrayType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *ArrayType) GetLbrack() *Foo3 {
	if m != nil {
		return m.Lbrack
	}
	return nil
}

func (m *ArrayType) GetElt() *Foo2 {
	if m != nil {
		return m.Elt
	}
	return nil
}

type AddressTable struct {
	Scopes          map[string]*Scope          `protobuf:"bytes,1,rep,name=Scopes,json=scopes" json:"Scopes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objects         map[string]*Object         `protobuf:"bytes,2,rep,name=Objects,json=objects" json:"Objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ArrayTypes      map[string]*ArrayType      `protobuf:"bytes,3,rep,name=ArrayTypes,json=arrayTypes" json:"ArrayTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AssignStmts     map[string]*AssignStmt     `protobuf:"bytes,4,rep,name=AssignStmts,json=assignStmts" json:"AssignStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BadDecls        map[string]*BadDecl        `protobuf:"bytes,5,rep,name=BadDecls,json=badDecls" json:"BadDecls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BadExprs        map[string]*BadExpr        `protobuf:"bytes,6,rep,name=BadExprs,json=badExprs" json:"BadExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BadStmts        map[string]*BadStmt        `protobuf:"bytes,7,rep,name=BadStmts,json=badStmts" json:"BadStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BasicLits       map[string]*BasicLit       `protobuf:"bytes,8,rep,name=BasicLits,json=basicLits" json:"BasicLits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BinaryExprs     map[string]*BinaryExpr     `protobuf:"bytes,9,rep,name=BinaryExprs,json=binaryExprs" json:"BinaryExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BlockStmts      map[string]*BlockStmt      `protobuf:"bytes,10,rep,name=BlockStmts,json=blockStmts" json:"BlockStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BranchStmts     map[string]*BranchStmt     `protobuf:"bytes,11,rep,name=BranchStmts,json=branchStmts" json:"BranchStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CallExprs       map[string]*CallExpr       `protobuf:"bytes,12,rep,name=CallExprs,json=callExprs" json:"CallExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CaseClauses     map[string]*CaseClause     `protobuf:"bytes,13,rep,name=CaseClauses,json=caseClauses" json:"CaseClauses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ChanDirs        map[string]*ChanDir        `protobuf:"bytes,14,rep,name=ChanDirs,json=chanDirs" json:"ChanDirs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ChanTypes       map[string]*ChanType       `protobuf:"bytes,15,rep,name=ChanTypes,json=chanTypes" json:"ChanTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CommClauses     map[string]*CommClause     `protobuf:"bytes,16,rep,name=CommClauses,json=commClauses" json:"CommClauses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CommentGroups   map[string]*CommentGroup   `protobuf:"bytes,17,rep,name=CommentGroups,json=commentGroups" json:"CommentGroups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Comments        map[string]*Comment        `protobuf:"bytes,18,rep,name=Comments,json=comments" json:"Comments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompositeLits   map[string]*CompositeLit   `protobuf:"bytes,19,rep,name=CompositeLits,json=compositeLits" json:"CompositeLits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeclStmts       map[string]*DeclStmt       `protobuf:"bytes,20,rep,name=DeclStmts,json=declStmts" json:"DeclStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeferStmts      map[string]*DeferStmt      `protobuf:"bytes,21,rep,name=DeferStmts,json=deferStmts" json:"DeferStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ellipsiss       map[string]*Ellipsis       `protobuf:"bytes,22,rep,name=Ellipsiss,json=ellipsiss" json:"Ellipsiss,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EmptyStmts      map[string]*EmptyStmt      `protobuf:"bytes,23,rep,name=EmptyStmts,json=emptyStmts" json:"EmptyStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExprStmts       map[string]*ExprStmt       `protobuf:"bytes,24,rep,name=ExprStmts,json=exprStmts" json:"ExprStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FieldLists      map[string]*FieldList      `protobuf:"bytes,25,rep,name=FieldLists,json=fieldLists" json:"FieldLists,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fields          map[string]*Field          `protobuf:"bytes,26,rep,name=Fields,json=fields" json:"Fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Files           map[string]*File           `protobuf:"bytes,27,rep,name=Files,json=files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ForStmts        map[string]*ForStmt        `protobuf:"bytes,28,rep,name=ForStmts,json=forStmts" json:"ForStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FuncDecls       map[string]*FuncDecl       `protobuf:"bytes,29,rep,name=FuncDecls,json=funcDecls" json:"FuncDecls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FuncLits        map[string]*FuncLit        `protobuf:"bytes,30,rep,name=FuncLits,json=funcLits" json:"FuncLits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FuncTypes       map[string]*FuncType       `protobuf:"bytes,31,rep,name=FuncTypes,json=funcTypes" json:"FuncTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GenDecls        map[string]*GenDecl        `protobuf:"bytes,32,rep,name=GenDecls,json=genDecls" json:"GenDecls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GoStmts         map[string]*GoStmt         `protobuf:"bytes,33,rep,name=GoStmts,json=goStmts" json:"GoStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Idents          map[string]*Ident          `protobuf:"bytes,34,rep,name=Idents,json=idents" json:"Idents,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IfStmts         map[string]*IfStmt         `protobuf:"bytes,35,rep,name=IfStmts,json=ifStmts" json:"IfStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ImportSpecs     map[string]*ImportSpec     `protobuf:"bytes,36,rep,name=ImportSpecs,json=importSpecs" json:"ImportSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IncDecStmts     map[string]*IncDecStmt     `protobuf:"bytes,37,rep,name=IncDecStmts,json=incDecStmts" json:"IncDecStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IndexExprs      map[string]*IndexExpr      `protobuf:"bytes,38,rep,name=IndexExprs,json=indexExprs" json:"IndexExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InterfaceTypes  map[string]*InterfaceType  `protobuf:"bytes,39,rep,name=InterfaceTypes,json=interfaceTypes" json:"InterfaceTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsExporteds     map[string]*IsExported     `protobuf:"bytes,40,rep,name=IsExporteds,json=isExporteds" json:"IsExporteds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	KeyValueExprs   map[string]*KeyValueExpr   `protobuf:"bytes,41,rep,name=KeyValueExprs,json=keyValueExprs" json:"KeyValueExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LabeledStmts    map[string]*LabeledStmt    `protobuf:"bytes,42,rep,name=LabeledStmts,json=labeledStmts" json:"LabeledStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapTypes        map[string]*MapType        `protobuf:"bytes,43,rep,name=MapTypes,json=mapTypes" json:"MapTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NewIdents       map[string]*NewIdent       `protobuf:"bytes,44,rep,name=NewIdents,json=newIdents" json:"NewIdents,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nodes           map[string]*Node           `protobuf:"bytes,45,rep,name=Nodes,json=nodes" json:"Nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Packages        map[string]*Package        `protobuf:"bytes,46,rep,name=Packages,json=packages" json:"Packages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ParenExprs      map[string]*ParenExpr      `protobuf:"bytes,47,rep,name=ParenExprs,json=parenExprs" json:"ParenExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RangeStmts      map[string]*RangeStmt      `protobuf:"bytes,48,rep,name=RangeStmts,json=rangeStmts" json:"RangeStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReturnStmts     map[string]*ReturnStmt     `protobuf:"bytes,49,rep,name=ReturnStmts,json=returnStmts" json:"ReturnStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SelectStmts     map[string]*SelectStmt     `protobuf:"bytes,50,rep,name=SelectStmts,json=selectStmts" json:"SelectStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SelectorExprs   map[string]*SelectorExpr   `protobuf:"bytes,51,rep,name=SelectorExprs,json=selectorExprs" json:"SelectorExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SendStmts       map[string]*SendStmt       `protobuf:"bytes,52,rep,name=SendStmts,json=sendStmts" json:"SendStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SliceExprs      map[string]*SliceExpr      `protobuf:"bytes,53,rep,name=SliceExprs,json=sliceExprs" json:"SliceExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StructTypes     map[string]*StructType     `protobuf:"bytes,55,rep,name=StructTypes,json=structTypes" json:"StructTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SwitchStmts     map[string]*SwitchStmt     `protobuf:"bytes,56,rep,name=SwitchStmts,json=switchStmts" json:"SwitchStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TypeAssertExprs map[string]*TypeAssertExpr `protobuf:"bytes,57,rep,name=TypeAssertExprs,json=typeAssertExprs" json:"TypeAssertExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TypeSpecs       map[string]*TypeSpec       `protobuf:"bytes,58,rep,name=TypeSpecs,json=typeSpecs" json:"TypeSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TypeSwitchStmts map[string]*TypeSwitchStmt `protobuf:"bytes,59,rep,name=TypeSwitchStmts,json=typeSwitchStmts" json:"TypeSwitchStmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnaryExprs      map[string]*UnaryExpr      `protobuf:"bytes,60,rep,name=UnaryExprs,json=unaryExprs" json:"UnaryExprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ValueSpecs      map[string]*ValueSpec      `protobuf:"bytes,61,rep,name=ValueSpecs,json=valueSpecs" json:"ValueSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// interfaces
	Specs            map[string]*Spec `protobuf:"bytes,62,rep,name=Specs,json=specs" json:"Specs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Decls            map[string]*Decl `protobuf:"bytes,63,rep,name=Decls,json=decls" json:"Decls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Exprs            map[string]*Expr `protobuf:"bytes,64,rep,name=Exprs,json=exprs" json:"Exprs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Stmts            map[string]*Stmt `protobuf:"bytes,65,rep,name=Stmts,json=stmts" json:"Stmts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *AddressTable) Reset()                    { *m = AddressTable{} }
func (m *AddressTable) String() string            { return proto.CompactTextString(m) }
func (*AddressTable) ProtoMessage()               {}
func (*AddressTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *AddressTable) GetScopes() map[string]*Scope {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *AddressTable) GetObjects() map[string]*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *AddressTable) GetArrayTypes() map[string]*ArrayType {
	if m != nil {
		return m.ArrayTypes
	}
	return nil
}

func (m *AddressTable) GetAssignStmts() map[string]*AssignStmt {
	if m != nil {
		return m.AssignStmts
	}
	return nil
}

func (m *AddressTable) GetBadDecls() map[string]*BadDecl {
	if m != nil {
		return m.BadDecls
	}
	return nil
}

func (m *AddressTable) GetBadExprs() map[string]*BadExpr {
	if m != nil {
		return m.BadExprs
	}
	return nil
}

func (m *AddressTable) GetBadStmts() map[string]*BadStmt {
	if m != nil {
		return m.BadStmts
	}
	return nil
}

func (m *AddressTable) GetBasicLits() map[string]*BasicLit {
	if m != nil {
		return m.BasicLits
	}
	return nil
}

func (m *AddressTable) GetBinaryExprs() map[string]*BinaryExpr {
	if m != nil {
		return m.BinaryExprs
	}
	return nil
}

func (m *AddressTable) GetBlockStmts() map[string]*BlockStmt {
	if m != nil {
		return m.BlockStmts
	}
	return nil
}

func (m *AddressTable) GetBranchStmts() map[string]*BranchStmt {
	if m != nil {
		return m.BranchStmts
	}
	return nil
}

func (m *AddressTable) GetCallExprs() map[string]*CallExpr {
	if m != nil {
		return m.CallExprs
	}
	return nil
}

func (m *AddressTable) GetCaseClauses() map[string]*CaseClause {
	if m != nil {
		return m.CaseClauses
	}
	return nil
}

func (m *AddressTable) GetChanDirs() map[string]*ChanDir {
	if m != nil {
		return m.ChanDirs
	}
	return nil
}

func (m *AddressTable) GetChanTypes() map[string]*ChanType {
	if m != nil {
		return m.ChanTypes
	}
	return nil
}

func (m *AddressTable) GetCommClauses() map[string]*CommClause {
	if m != nil {
		return m.CommClauses
	}
	return nil
}

func (m *AddressTable) GetCommentGroups() map[string]*CommentGroup {
	if m != nil {
		return m.CommentGroups
	}
	return nil
}

func (m *AddressTable) GetComments() map[string]*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *AddressTable) GetCompositeLits() map[string]*CompositeLit {
	if m != nil {
		return m.CompositeLits
	}
	return nil
}

func (m *AddressTable) GetDeclStmts() map[string]*DeclStmt {
	if m != nil {
		return m.DeclStmts
	}
	return nil
}

func (m *AddressTable) GetDeferStmts() map[string]*DeferStmt {
	if m != nil {
		return m.DeferStmts
	}
	return nil
}

func (m *AddressTable) GetEllipsiss() map[string]*Ellipsis {
	if m != nil {
		return m.Ellipsiss
	}
	return nil
}

func (m *AddressTable) GetEmptyStmts() map[string]*EmptyStmt {
	if m != nil {
		return m.EmptyStmts
	}
	return nil
}

func (m *AddressTable) GetExprStmts() map[string]*ExprStmt {
	if m != nil {
		return m.ExprStmts
	}
	return nil
}

func (m *AddressTable) GetFieldLists() map[string]*FieldList {
	if m != nil {
		return m.FieldLists
	}
	return nil
}

func (m *AddressTable) GetFields() map[string]*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *AddressTable) GetFiles() map[string]*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *AddressTable) GetForStmts() map[string]*ForStmt {
	if m != nil {
		return m.ForStmts
	}
	return nil
}

func (m *AddressTable) GetFuncDecls() map[string]*FuncDecl {
	if m != nil {
		return m.FuncDecls
	}
	return nil
}

func (m *AddressTable) GetFuncLits() map[string]*FuncLit {
	if m != nil {
		return m.FuncLits
	}
	return nil
}

func (m *AddressTable) GetFuncTypes() map[string]*FuncType {
	if m != nil {
		return m.FuncTypes
	}
	return nil
}

func (m *AddressTable) GetGenDecls() map[string]*GenDecl {
	if m != nil {
		return m.GenDecls
	}
	return nil
}

func (m *AddressTable) GetGoStmts() map[string]*GoStmt {
	if m != nil {
		return m.GoStmts
	}
	return nil
}

func (m *AddressTable) GetIdents() map[string]*Ident {
	if m != nil {
		return m.Idents
	}
	return nil
}

func (m *AddressTable) GetIfStmts() map[string]*IfStmt {
	if m != nil {
		return m.IfStmts
	}
	return nil
}

func (m *AddressTable) GetImportSpecs() map[string]*ImportSpec {
	if m != nil {
		return m.ImportSpecs
	}
	return nil
}

func (m *AddressTable) GetIncDecStmts() map[string]*IncDecStmt {
	if m != nil {
		return m.IncDecStmts
	}
	return nil
}

func (m *AddressTable) GetIndexExprs() map[string]*IndexExpr {
	if m != nil {
		return m.IndexExprs
	}
	return nil
}

func (m *AddressTable) GetInterfaceTypes() map[string]*InterfaceType {
	if m != nil {
		return m.InterfaceTypes
	}
	return nil
}

func (m *AddressTable) GetIsExporteds() map[string]*IsExported {
	if m != nil {
		return m.IsExporteds
	}
	return nil
}

func (m *AddressTable) GetKeyValueExprs() map[string]*KeyValueExpr {
	if m != nil {
		return m.KeyValueExprs
	}
	return nil
}

func (m *AddressTable) GetLabeledStmts() map[string]*LabeledStmt {
	if m != nil {
		return m.LabeledStmts
	}
	return nil
}

func (m *AddressTable) GetMapTypes() map[string]*MapType {
	if m != nil {
		return m.MapTypes
	}
	return nil
}

func (m *AddressTable) GetNewIdents() map[string]*NewIdent {
	if m != nil {
		return m.NewIdents
	}
	return nil
}

func (m *AddressTable) GetNodes() map[string]*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *AddressTable) GetPackages() map[string]*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *AddressTable) GetParenExprs() map[string]*ParenExpr {
	if m != nil {
		return m.ParenExprs
	}
	return nil
}

func (m *AddressTable) GetRangeStmts() map[string]*RangeStmt {
	if m != nil {
		return m.RangeStmts
	}
	return nil
}

func (m *AddressTable) GetReturnStmts() map[string]*ReturnStmt {
	if m != nil {
		return m.ReturnStmts
	}
	return nil
}

func (m *AddressTable) GetSelectStmts() map[string]*SelectStmt {
	if m != nil {
		return m.SelectStmts
	}
	return nil
}

func (m *AddressTable) GetSelectorExprs() map[string]*SelectorExpr {
	if m != nil {
		return m.SelectorExprs
	}
	return nil
}

func (m *AddressTable) GetSendStmts() map[string]*SendStmt {
	if m != nil {
		return m.SendStmts
	}
	return nil
}

func (m *AddressTable) GetSliceExprs() map[string]*SliceExpr {
	if m != nil {
		return m.SliceExprs
	}
	return nil
}

func (m *AddressTable) GetStructTypes() map[string]*StructType {
	if m != nil {
		return m.StructTypes
	}
	return nil
}

func (m *AddressTable) GetSwitchStmts() map[string]*SwitchStmt {
	if m != nil {
		return m.SwitchStmts
	}
	return nil
}

func (m *AddressTable) GetTypeAssertExprs() map[string]*TypeAssertExpr {
	if m != nil {
		return m.TypeAssertExprs
	}
	return nil
}

func (m *AddressTable) GetTypeSpecs() map[string]*TypeSpec {
	if m != nil {
		return m.TypeSpecs
	}
	return nil
}

func (m *AddressTable) GetTypeSwitchStmts() map[string]*TypeSwitchStmt {
	if m != nil {
		return m.TypeSwitchStmts
	}
	return nil
}

func (m *AddressTable) GetUnaryExprs() map[string]*UnaryExpr {
	if m != nil {
		return m.UnaryExprs
	}
	return nil
}

func (m *AddressTable) GetValueSpecs() map[string]*ValueSpec {
	if m != nil {
		return m.ValueSpecs
	}
	return nil
}

func (m *AddressTable) GetSpecs() map[string]*Spec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *AddressTable) GetDecls() map[string]*Decl {
	if m != nil {
		return m.Decls
	}
	return nil
}

func (m *AddressTable) GetExprs() map[string]*Expr {
	if m != nil {
		return m.Exprs
	}
	return nil
}

func (m *AddressTable) GetStmts() map[string]*Stmt {
	if m != nil {
		return m.Stmts
	}
	return nil
}

// A TypeAssertExpr node represents an expression followed by a
// type assertion.
type TypeAssertExpr struct {
	X *Foo2 `protobuf:"bytes,1,opt,name=X,json=x" json:"X,omitempty"`
	// expression
	Lparen *Foo3 `protobuf:"bytes,2,opt,name=Lparen,json=lparen" json:"Lparen,omitempty"`
	Type   *Foo2 `protobuf:"bytes,3,opt,name=Type,json=type" json:"Type,omitempty"`
	// asserted type; nil means type switch X.(type)
	Rparen           *Foo3  `protobuf:"bytes,4,opt,name=Rparen,json=rparen" json:"Rparen,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TypeAssertExpr) Reset()                    { *m = TypeAssertExpr{} }
func (m *TypeAssertExpr) String() string            { return proto.CompactTextString(m) }
func (*TypeAssertExpr) ProtoMessage()               {}
func (*TypeAssertExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *TypeAssertExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *TypeAssertExpr) GetLparen() *Foo3 {
	if m != nil {
		return m.Lparen
	}
	return nil
}

func (m *TypeAssertExpr) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TypeAssertExpr) GetRparen() *Foo3 {
	if m != nil {
		return m.Rparen
	}
	return nil
}

type TypeSpec struct {
	Name             *Foo2  `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Type             *Foo2  `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TypeSpec) Reset()                    { *m = TypeSpec{} }
func (m *TypeSpec) String() string            { return proto.CompactTextString(m) }
func (*TypeSpec) ProtoMessage()               {}
func (*TypeSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *TypeSpec) GetName() *Foo2 {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TypeSpec) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

// An TypeSwitchStmt node represents a type switch statement.
type TypeSwitchStmt struct {
	Switch *Foo2 `protobuf:"bytes,1,opt,name=Switch,json=switch" json:"Switch,omitempty"`
	// position of "switch" keyword
	Init *Foo2 `protobuf:"bytes,2,opt,name=Init,json=init" json:"Init,omitempty"`
	// initialization statement; or nil
	Assign *Foo2 `protobuf:"bytes,3,opt,name=Assign,json=assign" json:"Assign,omitempty"`
	// x := y.(type) or y.(type)
	Body             *Foo2  `protobuf:"bytes,4,opt,name=Body,json=body" json:"Body,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TypeSwitchStmt) Reset()                    { *m = TypeSwitchStmt{} }
func (m *TypeSwitchStmt) String() string            { return proto.CompactTextString(m) }
func (*TypeSwitchStmt) ProtoMessage()               {}
func (*TypeSwitchStmt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *TypeSwitchStmt) GetSwitch() *Foo2 {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *TypeSwitchStmt) GetInit() *Foo2 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *TypeSwitchStmt) GetAssign() *Foo2 {
	if m != nil {
		return m.Assign
	}
	return nil
}

func (m *TypeSwitchStmt) GetBody() *Foo2 {
	if m != nil {
		return m.Body
	}
	return nil
}

// A UnaryExpr node represents a unary expression.
// Unary "*" expressions are represented via StarExpr nodes.
type UnaryExpr struct {
	OpPos *Foo3 `protobuf:"bytes,1,opt,name=OpPos,json=opPos" json:"OpPos,omitempty"`
	Op    *Foo3 `protobuf:"bytes,2,opt,name=Op,json=op" json:"Op,omitempty"`
	// operator
	X                *Foo2  `protobuf:"bytes,3,opt,name=X,json=x" json:"X,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UnaryExpr) Reset()                    { *m = UnaryExpr{} }
func (m *UnaryExpr) String() string            { return proto.CompactTextString(m) }
func (*UnaryExpr) ProtoMessage()               {}
func (*UnaryExpr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *UnaryExpr) GetOpPos() *Foo3 {
	if m != nil {
		return m.OpPos
	}
	return nil
}

func (m *UnaryExpr) GetOp() *Foo3 {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *UnaryExpr) GetX() *Foo2 {
	if m != nil {
		return m.X
	}
	return nil
}

type ValueSpec struct {
	Names            []*Ident `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
	Type             *Foo2    `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	Values           []*Expr  `protobuf:"bytes,3,rep,name=Values,json=values" json:"Values,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ValueSpec) Reset()                    { *m = ValueSpec{} }
func (m *ValueSpec) String() string            { return proto.CompactTextString(m) }
func (*ValueSpec) ProtoMessage()               {}
func (*ValueSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ValueSpec) GetNames() []*Ident {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ValueSpec) GetType() *Foo2 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ValueSpec) GetValues() []*Expr {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*ExprStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ExprStmt")
	proto.RegisterType((*StarExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.StarExpr")
	proto.RegisterType((*DeclStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.DeclStmt")
	proto.RegisterType((*BadDecl)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BadDecl")
	proto.RegisterType((*ChanDir)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ChanDir")
	proto.RegisterType((*ChanType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ChanType")
	proto.RegisterType((*Comment)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Comment")
	proto.RegisterType((*ReturnStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ReturnStmt")
	proto.RegisterType((*IsExported)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.IsExported")
	proto.RegisterType((*NewIdent)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NewIdent")
	proto.RegisterType((*Node)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Node")
	proto.RegisterType((*Expr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Expr")
	proto.RegisterType((*Stmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Stmt")
	proto.RegisterType((*Decl)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Decl")
	proto.RegisterType((*Spec)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Spec")
	proto.RegisterType((*ImportSpec)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ImportSpec")
	proto.RegisterType((*CommentGroup)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.CommentGroup")
	proto.RegisterType((*Foo3)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Foo3")
	proto.RegisterType((*Foo2)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Foo2")
	proto.RegisterType((*AssignStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.AssignStmt")
	proto.RegisterType((*BadExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BadExpr")
	proto.RegisterType((*BadStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BadStmt")
	proto.RegisterType((*BasicLit)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BasicLit")
	proto.RegisterType((*BinaryExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BinaryExpr")
	proto.RegisterType((*BlockStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BlockStmt")
	proto.RegisterType((*BranchStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.BranchStmt")
	proto.RegisterType((*CallExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.CallExpr")
	proto.RegisterType((*CaseClause)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.CaseClause")
	proto.RegisterType((*CommClause)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.CommClause")
	proto.RegisterType((*CompositeLit)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.CompositeLit")
	proto.RegisterType((*DeferStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.DeferStmt")
	proto.RegisterType((*Deferred)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Deferred")
	proto.RegisterType((*Ellipsis)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Ellipsis")
	proto.RegisterType((*EmptyStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.EmptyStmt")
	proto.RegisterType((*Field)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Field")
	proto.RegisterType((*FieldList)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.FieldList")
	proto.RegisterType((*File)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.File")
	proto.RegisterType((*ForStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ForStmt")
	proto.RegisterType((*FuncDecl)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.FuncDecl")
	proto.RegisterType((*FuncLit)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.FuncLit")
	proto.RegisterType((*FuncType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.FuncType")
	proto.RegisterType((*GenDecl)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.GenDecl")
	proto.RegisterType((*GoStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.GoStmt")
	proto.RegisterType((*Ident)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Ident")
	proto.RegisterType((*IfStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.IfStmt")
	proto.RegisterType((*IncDecStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.IncDecStmt")
	proto.RegisterType((*IndexExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.IndexExpr")
	proto.RegisterType((*InterfaceType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.InterfaceType")
	proto.RegisterType((*KeyValueExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.KeyValueExpr")
	proto.RegisterType((*LabeledStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.LabeledStmt")
	proto.RegisterType((*MapType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.MapType")
	proto.RegisterType((*Object)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Object")
	proto.RegisterType((*Package)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Package")
	proto.RegisterType((*ParenExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ParenExpr")
	proto.RegisterType((*RangeStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.RangeStmt")
	proto.RegisterType((*Scope)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.Scope")
	proto.RegisterType((*SelectStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.SelectStmt")
	proto.RegisterType((*SelectorExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.SelectorExpr")
	proto.RegisterType((*SendStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.SendStmt")
	proto.RegisterType((*SliceExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.SliceExpr")
	proto.RegisterType((*StructType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.StructType")
	proto.RegisterType((*SwitchStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.SwitchStmt")
	proto.RegisterType((*ArrayType)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ArrayType")
	proto.RegisterType((*AddressTable)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.AddressTable")
	proto.RegisterType((*TypeAssertExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.TypeAssertExpr")
	proto.RegisterType((*TypeSpec)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.TypeSpec")
	proto.RegisterType((*TypeSwitchStmt)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.TypeSwitchStmt")
	proto.RegisterType((*UnaryExpr)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.UnaryExpr")
	proto.RegisterType((*ValueSpec)(nil), "github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.ValueSpec")
	proto.RegisterEnum("github.com.h4ck3rm1k3.gogccintro.fakego.ast.proto.NodeType", NodeType_name, NodeType_value)
}

func init() { proto.RegisterFile("generated.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x7d, 0xcb, 0x8f, 0x23, 0xc9,
	0x71, 0xf7, 0xc7, 0x37, 0x99, 0xdd, 0xd3, 0xc3, 0xad, 0x7d, 0xd5, 0xce, 0xbe, 0x66, 0xb9, 0xef,
	0x57, 0xef, 0x6e, 0xcf, 0xae, 0x76, 0xf6, 0x29, 0xb1, 0xd9, 0xd5, 0xbd, 0x54, 0xb3, 0xc9, 0x9e,
	0x22, 0x7b, 0x67, 0x46, 0x82, 0xf0, 0x6d, 0x35, 0x59, 0xec, 0xe6, 0x76, 0x91, 0x45, 0x31, 0xab,
	0x67, 0xa6, 0xb1, 0xb0, 0x6c, 0xc3, 0x10, 0xec, 0x7f, 0xc0, 0x82, 0x7d, 0xb2, 0x60, 0x18, 0x30,
	0x20, 0xf9, 0x64, 0xc0, 0x07, 0x03, 0x86, 0x0e, 0x12, 0xe0, 0x83, 0xe1, 0x9b, 0x7d, 0xb6, 0xef,
	0x3e, 0x58, 0x17, 0x1b, 0xb6, 0xec, 0x83, 0x8d, 0x88, 0x7c, 0x55, 0x71, 0x5a, 0x2b, 0xbb, 0x32,
	0x6b, 0x34, 0x0b, 0xf8, 0xd4, 0x9d, 0x49, 0xf2, 0x17, 0x19, 0x91, 0x11, 0x91, 0x19, 0x19, 0x51,
	0x95, 0xe4, 0xe2, 0x91, 0x3f, 0xf3, 0x17, 0x5e, 0xe4, 0x8f, 0xd6, 0xe7, 0x8b, 0x30, 0x0a, 0xad,
	0xb7, 0x8e, 0x26, 0xd1, 0xf1, 0xe9, 0xe1, 0xfa, 0x30, 0x9c, 0xae, 0x1f, 0xbf, 0x3d, 0x3c, 0xb9,
	0xb2, 0x98, 0xbe, 0x75, 0x72, 0x65, 0xfd, 0x28, 0x3c, 0x1a, 0x0e, 0x27, 0xb3, 0x68, 0x11, 0xae,
	0x8f, 0xbd, 0x13, 0xff, 0x28, 0x5c, 0xf7, 0x68, 0xc4, 0x7e, 0xd2, 0xb8, 0x46, 0xaa, 0xce, 0x9d,
	0xf9, 0xa2, 0x1f, 0x4d, 0x23, 0xcb, 0x21, 0xb9, 0x1b, 0x76, 0xee, 0x72, 0xfe, 0xa5, 0x95, 0x8d,
	0x77, 0xd7, 0xff, 0xd7, 0x50, 0xeb, 0xdb, 0x61, 0xb8, 0xe1, 0xe6, 0xee, 0x34, 0x08, 0xa9, 0xf6,
	0x23, 0x6f, 0x01, 0xb0, 0xf0, 0xff, 0x96, 0x3f, 0x0c, 0x00, 0xbe, 0x51, 0x23, 0x95, 0x4d, 0x6f,
	0x04, 0x4d, 0xf8, 0xb7, 0x75, 0xec, 0xcd, 0xb6, 0x26, 0xf8, 0x0d, 0xf8, 0x77, 0x70, 0x36, 0xf7,
	0xb1, 0x3b, 0x9c, 0x4e, 0xfd, 0x59, 0xd4, 0x58, 0x25, 0xc4, 0xf5, 0xa3, 0xd3, 0xc5, 0x0c, 0x7f,
	0xba, 0x4a, 0x48, 0x9b, 0x3a, 0x77, 0xe6, 0xe1, 0x22, 0xf2, 0x47, 0xf0, 0x93, 0xae, 0x7f, 0xbb,
	0x3d, 0x82, 0xef, 0x95, 0x49, 0xb1, 0x1b, 0x8e, 0xfc, 0xc6, 0x5f, 0xd5, 0x48, 0x11, 0x28, 0x5a,
	0x3d, 0x52, 0x8c, 0xce, 0xe6, 0x3e, 0xf2, 0xb1, 0xb6, 0xf1, 0x41, 0x0a, 0x3e, 0x00, 0x0f, 0x86,
	0xe3, 0x22, 0x90, 0x35, 0x20, 0x95, 0x43, 0x6f, 0xe4, 0xdf, 0x99, 0x2f, 0xec, 0xc2, 0xe5, 0xdc,
	0x4b, 0x2b, 0x1b, 0xef, 0xa7, 0xc0, 0xdc, 0xf4, 0x46, 0x30, 0x3a, 0x57, 0x40, 0x59, 0xdf, 0x21,
	0xe4, 0x70, 0x32, 0xf3, 0x16, 0x67, 0x08, 0x5c, 0x46, 0xe0, 0x8f, 0xd2, 0x00, 0x23, 0x08, 0x62,
	0xc7, 0x00, 0xad, 0xeb, 0xa4, 0x3a, 0xf4, 0x82, 0x00, 0xc1, 0x6b, 0x08, 0x9e, 0x46, 0x12, 0x2d,
	0x2f, 0x08, 0x10, 0x5a, 0x82, 0x01, 0x30, 0xfc, 0xa5, 0xd1, 0x34, 0xb2, 0x1f, 0x4a, 0x0d, 0x2c,
	0x54, 0xce, 0x95, 0x60, 0xd6, 0xb7, 0x48, 0x6d, 0x32, 0x1b, 0xf9, 0x77, 0x70, 0xc8, 0x0d, 0x44,
	0xfe, 0x30, 0x05, 0x72, 0x1b, 0x30, 0x70, 0xcc, 0x0a, 0xce, 0x1a, 0x92, 0xd5, 0x13, 0xff, 0xec,
	0x96, 0x17, 0x9c, 0xfa, 0x08, 0xff, 0x3c, 0xc2, 0x7f, 0x3d, 0x05, 0xfc, 0xae, 0x7f, 0xf6, 0x29,
	0xc0, 0x20, 0x85, 0x04, 0x28, 0x30, 0x30, 0xf7, 0x16, 0xfe, 0x0c, 0x29, 0xbc, 0x92, 0x9a, 0x81,
	0x7d, 0xc0, 0x60, 0x0c, 0x48, 0x38, 0x60, 0x80, 0xfa, 0x81, 0x3f, 0x8c, 0xc2, 0x05, 0xc2, 0xaf,
	0xa7, 0x66, 0xa0, 0xcf, 0x61, 0x18, 0x03, 0x71, 0x50, 0x60, 0x80, 0x06, 0x93, 0x21, 0x13, 0xd1,
	0x9b, 0xa9, 0x19, 0xe8, 0x03, 0x06, 0x63, 0x40, 0xc2, 0x81, 0xda, 0xd0, 0xc8, 0x63, 0x83, 0xdf,
	0x48, 0xad, 0x36, 0xc2, 0xad, 0xb8, 0x12, 0xcc, 0x9a, 0x90, 0x35, 0xb0, 0x52, 0x8f, 0x52, 0x7f,
	0x11, 0x21, 0xfc, 0x3b, 0x08, 0xdf, 0x4c, 0x01, 0x0f, 0x46, 0xdf, 0x44, 0x20, 0x24, 0xb2, 0x04,
	0x0c, 0xf2, 0x39, 0x95, 0x16, 0x7b, 0x35, 0xb5, 0x7c, 0x0e, 0xa4, 0xc1, 0x2a, 0xb8, 0xc6, 0x8f,
	0xd7, 0x48, 0x11, 0x7d, 0x70, 0x46, 0xee, 0x0b, 0xed, 0xb5, 0xa8, 0xe3, 0xbe, 0xd0, 0x5c, 0x05,
	0x14, 0xc8, 0xe2, 0x30, 0x08, 0x87, 0x27, 0x88, 0x5b, 0x49, 0x2d, 0x8b, 0x4d, 0xc0, 0x40, 0x64,
	0x05, 0x87, 0xae, 0x71, 0xe1, 0xcd, 0x86, 0xc7, 0x08, 0x5e, 0x4d, 0xef, 0x1a, 0x11, 0x04, 0xd1,
	0x63, 0x80, 0xa0, 0x8a, 0x23, 0x7f, 0x18, 0x20, 0x78, 0x3d, 0xb5, 0x2a, 0x8a, 0x55, 0xcd, 0x95,
	0x60, 0x20, 0x93, 0x91, 0x3f, 0xf6, 0x99, 0x6f, 0x7c, 0x20, 0xb5, 0x4c, 0xb6, 0x00, 0x83, 0xc9,
	0x44, 0xc2, 0x01, 0xb6, 0x3f, 0x9d, 0x47, 0x67, 0x88, 0xfd, 0x60, 0x6a, 0x6c, 0x07, 0x30, 0x18,
	0xb6, 0x84, 0xcb, 0xce, 0xa5, 0x0f, 0x48, 0x65, 0x1c, 0x32, 0x5c, 0x3b, 0xb5, 0xea, 0x6d, 0x87,
	0x0c, 0x56, 0x40, 0x59, 0xd7, 0x48, 0xf9, 0x28, 0x44, 0xd0, 0x27, 0x11, 0xf4, 0xbd, 0x14, 0xa0,
	0x3b, 0x21, 0x62, 0x72, 0x20, 0x80, 0x9c, 0x8c, 0x11, 0xf2, 0xe9, 0xd4, 0x90, 0xed, 0x31, 0x83,
	0x64, 0x40, 0xa0, 0xc4, 0x93, 0xd9, 0x70, 0xe4, 0x0f, 0x11, 0xf6, 0x99, 0xd4, 0x4a, 0xdc, 0x9e,
	0x0d, 0xb7, 0xfc, 0x21, 0x53, 0x62, 0x05, 0x68, 0x7d, 0x46, 0x56, 0x02, 0xef, 0xd0, 0x0f, 0x7c,
	0x66, 0xd9, 0x2f, 0x20, 0xfe, 0xc7, 0x29, 0xf0, 0x3b, 0x0c, 0x05, 0x09, 0xc4, 0x21, 0x41, 0xe3,
	0x16, 0xde, 0xec, 0xc8, 0x47, 0xfc, 0x57, 0x53, 0x6b, 0x9c, 0x0b, 0x18, 0x4c, 0xe3, 0x24, 0x1c,
	0x08, 0x67, 0x81, 0x9b, 0x3b, 0x04, 0x7f, 0x2d, 0xb5, 0x70, 0xd4, 0x0e, 0xd1, 0x8d, 0x01, 0x02,
	0x3c, 0x5b, 0xd8, 0x10, 0xfe, 0xf5, 0xd4, 0xf0, 0x6c, 0xad, 0x64, 0xf0, 0x0a, 0x10, 0xd7, 0x32,
	0x7f, 0xc6, 0x04, 0xff, 0x46, 0xfa, 0xb5, 0xcc, 0x9f, 0x31, 0xa9, 0x4b, 0x30, 0x1c, 0xf7, 0xed,
	0x49, 0xc4, 0x1d, 0xdf, 0xdb, 0xe9, 0xc7, 0x8d, 0x20, 0x7c, 0xdc, 0x12, 0x50, 0x2c, 0x95, 0x31,
	0x12, 0xef, 0x6a, 0x2d, 0x95, 0x31, 0x32, 0x4b, 0xc0, 0xc0, 0x89, 0x47, 0xe9, 0xe4, 0x88, 0x4d,
	0xf0, 0xd5, 0xd4, 0x9c, 0x34, 0x11, 0x84, 0x71, 0xa2, 0x00, 0x1b, 0x7f, 0x51, 0x20, 0x45, 0x70,
	0xc0, 0x59, 0xad, 0x96, 0xe0, 0xd2, 0xed, 0xbc, 0xce, 0x6a, 0x09, 0xa3, 0x73, 0x05, 0x54, 0x76,
	0x4b, 0xce, 0x75, 0x52, 0x1d, 0x9f, 0xa2, 0x57, 0x08, 0xec, 0xc7, 0x52, 0x03, 0x6f, 0x9f, 0xa2,
	0x93, 0x09, 0x5c, 0x09, 0x06, 0x72, 0x38, 0xf2, 0x67, 0x88, 0xfb, 0x44, 0x6a, 0x39, 0xec, 0xf8,
	0x33, 0x26, 0x07, 0x0e, 0x05, 0xc1, 0x5a, 0x7f, 0xee, 0x0f, 0x31, 0x9c, 0x9b, 0x42, 0x30, 0x87,
	0xad, 0x35, 0xb2, 0xca, 0xa3, 0xbe, 0x9d, 0x45, 0x78, 0x3a, 0x87, 0x6f, 0x6d, 0x87, 0xe1, 0x95,
	0xc6, 0xef, 0xbe, 0x86, 0xff, 0x6c, 0x7c, 0x55, 0x66, 0x39, 0x9b, 0x40, 0x31, 0x9b, 0xfd, 0xdb,
	0x75, 0x52, 0x3d, 0xf4, 0xe8, 0x64, 0x18, 0x4c, 0x22, 0xbb, 0x94, 0x5a, 0x71, 0x36, 0x01, 0xa2,
	0x33, 0x89, 0x5c, 0x09, 0x96, 0x75, 0x5c, 0xfb, 0xd5, 0xde, 0x77, 0x66, 0x13, 0x92, 0x7f, 0x87,
	0x90, 0xa1, 0x47, 0xfd, 0x61, 0xe0, 0x9d, 0x52, 0xdf, 0x26, 0xa9, 0xc7, 0xdd, 0xf2, 0xa8, 0xdf,
	0x42, 0x10, 0x37, 0x06, 0x08, 0x0a, 0x38, 0x3c, 0xf6, 0x66, 0xa3, 0xc9, 0xc2, 0x5e, 0x49, 0xad,
	0x80, 0xfc, 0xb4, 0xc7, 0x15, 0x50, 0x28, 0x8d, 0x63, 0x6f, 0x86, 0x76, 0xbd, 0x9a, 0x5e, 0x1a,
	0xfc, 0xe4, 0xc8, 0x95, 0x60, 0x28, 0x8d, 0x70, 0x3a, 0xe5, 0xd2, 0xb8, 0x90, 0x5e, 0x1a, 0xe1,
	0x74, 0x2a, 0xa5, 0x21, 0x01, 0x51, 0x1a, 0xcc, 0x59, 0xd9, 0x6b, 0xe9, 0xa5, 0xc1, 0x10, 0x5c,
	0x01, 0x05, 0xf1, 0xfd, 0x30, 0x9c, 0xce, 0x43, 0x3a, 0x89, 0x7c, 0x30, 0xc9, 0x8b, 0xa9, 0xe3,
	0xfb, 0x96, 0x80, 0x01, 0xb3, 0x4c, 0x80, 0x7e, 0x35, 0x03, 0x1f, 0x08, 0x4e, 0x82, 0x60, 0x32,
	0xa7, 0x13, 0x6a, 0x5b, 0xe9, 0x83, 0x13, 0x0e, 0xe1, 0x4a, 0xb0, 0xaf, 0x66, 0x44, 0xd5, 0x25,
	0xa5, 0xf1, 0xc4, 0x0f, 0x46, 0xf6, 0xc3, 0x88, 0x7a, 0x35, 0xcd, 0x62, 0x0f, 0xbf, 0x77, 0x19,
	0x0c, 0x08, 0x01, 0xff, 0x09, 0x26, 0x34, 0xb2, 0x1f, 0x49, 0x2d, 0x04, 0xc4, 0xec, 0x4c, 0x68,
	0xe4, 0x2a, 0x38, 0x6b, 0x97, 0x14, 0xc7, 0x93, 0xc0, 0xb7, 0x1f, 0x45, 0xd8, 0x54, 0x07, 0xca,
	0x93, 0xc0, 0x77, 0x11, 0x24, 0xa3, 0x50, 0x32, 0xcb, 0xed, 0x13, 0xfc, 0x0f, 0xa6, 0x7c, 0x29,
	0xfd, 0x70, 0x4f, 0x67, 0xb8, 0xb8, 0x0a, 0x28, 0x31, 0x5c, 0xf4, 0x99, 0x8f, 0x6b, 0x0d, 0x97,
	0xf9, 0x4c, 0x01, 0x96, 0xcd, 0x6e, 0x2f, 0x8b, 0x40, 0xbd, 0x4b, 0x4a, 0x93, 0x11, 0xf8, 0xde,
	0xa7, 0x52, 0xeb, 0x3f, 0xa6, 0x0d, 0x5c, 0x06, 0x93, 0x55, 0xe0, 0x8f, 0x7b, 0x5b, 0x3a, 0xf7,
	0x87, 0xf6, 0xe5, 0xf4, 0x81, 0xbf, 0xdc, 0x20, 0xbb, 0x31, 0xc0, 0xac, 0xcf, 0x15, 0xb2, 0x3c,
	0x85, 0x1f, 0x93, 0x0b, 0x93, 0x59, 0xe4, 0x2f, 0xc6, 0xde, 0xd0, 0x47, 0x1d, 0x7e, 0x16, 0xf1,
	0xbf, 0x91, 0x0a, 0x9f, 0xe3, 0xa0, 0x22, 0x27, 0x61, 0x51, 0x44, 0xd4, 0xe7, 0xc9, 0x22, 0xfb,
	0xb9, 0xf4, 0x22, 0x92, 0x19, 0x27, 0x37, 0x06, 0x78, 0x6f, 0x92, 0x09, 0xd9, 0x9f, 0xef, 0x0c,
	0x48, 0x65, 0xea, 0xcd, 0x71, 0x1e, 0x5e, 0x4c, 0x6d, 0xf3, 0x7b, 0xde, 0x1c, 0x67, 0x40, 0x40,
	0x81, 0x8b, 0x9a, 0xf9, 0xb7, 0x99, 0x8d, 0xbe, 0x94, 0xda, 0x45, 0x89, 0xec, 0x9e, 0x2b, 0xc1,
	0x60, 0xb8, 0x73, 0x6f, 0x78, 0xe2, 0x1d, 0xf9, 0xf6, 0xcb, 0xa9, 0x87, 0xbb, 0xcf, 0x10, 0x5c,
	0x01, 0x95, 0x69, 0xce, 0xe6, 0xff, 0x0e, 0xd0, 0x7e, 0xd9, 0x01, 0xda, 0x3d, 0xc9, 0x66, 0x65,
	0x76, 0x4a, 0x97, 0x65, 0x9a, 0x6c, 0x97, 0x14, 0x71, 0xd9, 0x78, 0x2b, 0xf5, 0x9e, 0x09, 0x17,
	0x0c, 0x04, 0xc9, 0x2e, 0xe7, 0x06, 0xea, 0x11, 0x2d, 0x4e, 0x87, 0x11, 0x7a, 0x8f, 0x2b, 0xe9,
	0xd5, 0x03, 0x41, 0xd0, 0x81, 0xc4, 0x00, 0xef, 0xd1, 0x31, 0xe8, 0xbd, 0xc8, 0x18, 0x5e, 0x27,
	0x55, 0x3c, 0x18, 0x85, 0x29, 0xfd, 0x5a, 0xea, 0x19, 0xc0, 0xb3, 0x56, 0x98, 0x56, 0x09, 0x76,
	0x2f, 0x8f, 0x72, 0x33, 0xcc, 0x7a, 0x02, 0x36, 0x2e, 0x79, 0x28, 0xa0, 0xf7, 0x52, 0x63, 0xe3,
	0x22, 0x8a, 0x12, 0x52, 0x70, 0x3c, 0xa4, 0x86, 0xe8, 0xfa, 0x68, 0x11, 0x9e, 0xce, 0xed, 0xf7,
	0x75, 0x42, 0x6a, 0x79, 0x38, 0xe9, 0x26, 0x40, 0x97, 0xce, 0xb9, 0x3f, 0x30, 0x7c, 0xce, 0x0d,
	0xdb, 0xd3, 0xf0, 0xf0, 0x73, 0x7f, 0x18, 0xd9, 0x1f, 0xa6, 0xde, 0x9e, 0xf6, 0x10, 0xc0, 0xe5,
	0x40, 0x20, 0x72, 0x6f, 0xb1, 0xf0, 0xce, 0xd0, 0x74, 0x3f, 0x4a, 0x2d, 0xf2, 0x26, 0x60, 0xa0,
	0xe5, 0x2a, 0x38, 0x76, 0xc0, 0x30, 0xf6, 0x17, 0x0b, 0x7f, 0x64, 0x7f, 0xac, 0x71, 0xc0, 0xc0,
	0x20, 0x5c, 0x09, 0xd6, 0xf8, 0x49, 0x9e, 0x10, 0x25, 0x22, 0xab, 0x4d, 0x0a, 0x9d, 0x63, 0x6a,
	0xe7, 0x2e, 0x17, 0x52, 0x3a, 0x49, 0xd4, 0xc3, 0x42, 0x70, 0x4c, 0xad, 0x1e, 0x29, 0x0f, 0xc2,
	0x93, 0xfd, 0x90, 0xf2, 0x83, 0xe0, 0x94, 0x75, 0x4f, 0x57, 0xdc, 0x72, 0x84, 0x30, 0x30, 0xb6,
	0x41, 0x78, 0xc2, 0x0f, 0x80, 0x53, 0xa3, 0x15, 0xa2, 0xf0, 0x04, 0xa0, 0xdc, 0x63, 0x6a, 0x17,
	0x35, 0xd9, 0x5c, 0x1c, 0xd3, 0xc6, 0x1f, 0xe5, 0xb0, 0xf6, 0xca, 0xe1, 0x6b, 0xcc, 0xf6, 0x22,
	0x9c, 0xda, 0x39, 0x9d, 0x21, 0x6e, 0xb8, 0xc5, 0xf1, 0x22, 0x9c, 0x5a, 0x3b, 0x24, 0x3f, 0x08,
	0xf5, 0x64, 0xb7, 0xe1, 0xe6, 0xa3, 0x50, 0x8c, 0x10, 0xe7, 0xf7, 0xfe, 0x1c, 0xe1, 0x7f, 0xe6,
	0x48, 0x55, 0x1c, 0x78, 0x5b, 0x7d, 0x52, 0x45, 0xaf, 0x03, 0x9a, 0x93, 0xd3, 0x9b, 0xeb, 0xea,
	0x2d, 0x0e, 0x04, 0x7c, 0xef, 0x4e, 0x66, 0x23, 0x5d, 0x55, 0x2c, 0x9e, 0x4c, 0x66, 0x23, 0x6b,
	0x8f, 0x94, 0x70, 0x84, 0xba, 0xaa, 0x58, 0xc2, 0xe1, 0x35, 0xfe, 0x3c, 0x4f, 0x88, 0x3a, 0x93,
	0x17, 0xa5, 0x82, 0x39, 0xbd, 0x52, 0x41, 0x18, 0x64, 0x6f, 0x6e, 0xc0, 0xfa, 0x4a, 0x21, 0xa0,
	0xc0, 0x5c, 0xf7, 0xe6, 0xba, 0x0c, 0xe7, 0xc3, 0x39, 0xb0, 0x77, 0x93, 0xa7, 0x5b, 0xd2, 0xb3,
	0x77, 0xd6, 0xf8, 0x8f, 0x1c, 0xa9, 0xc9, 0x54, 0x03, 0xf8, 0x9a, 0xce, 0xe1, 0xc2, 0x1b, 0xfa,
	0xba, 0x1a, 0x53, 0x0e, 0x10, 0x06, 0xf4, 0xa5, 0x33, 0xa1, 0x91, 0x9d, 0x4f, 0xed, 0x21, 0x70,
	0xc5, 0x29, 0xe2, 0x71, 0x5d, 0x8f, 0x94, 0x5d, 0x36, 0x3a, 0x4d, 0xf9, 0x95, 0x17, 0x08, 0xd3,
	0xf8, 0xf7, 0x1c, 0x21, 0x2a, 0x15, 0x12, 0xf3, 0xb4, 0x39, 0xa3, 0x9e, 0x36, 0x6f, 0xc0, 0xd3,
	0x76, 0x49, 0x09, 0xe3, 0x64, 0xce, 0xba, 0xc6, 0xb1, 0x12, 0x46, 0xd8, 0x8d, 0x3f, 0x2c, 0x90,
	0xaa, 0x48, 0xd4, 0xc0, 0x38, 0xb7, 0x4f, 0x67, 0xba, 0xc6, 0x52, 0x18, 0x9f, 0xce, 0x50, 0x83,
	0x30, 0xc0, 0xd4, 0x5e, 0xad, 0x02, 0x84, 0x01, 0x0d, 0x6a, 0x2e, 0x8e, 0xa8, 0x5d, 0xd0, 0x5b,
	0x63, 0x8a, 0xde, 0xe2, 0x88, 0x82, 0x4f, 0x14, 0xe7, 0xec, 0x7a, 0xb6, 0x73, 0x25, 0x76, 0x4c,
	0x0f, 0x6a, 0xc9, 0x58, 0x2e, 0xe9, 0xaa, 0x25, 0xc2, 0x34, 0x7e, 0x9a, 0x27, 0x44, 0x65, 0xba,
	0x40, 0x02, 0xd0, 0xd2, 0x55, 0xca, 0xe2, 0xd0, 0xa3, 0x26, 0x0c, 0x92, 0x89, 0x13, 0x0d, 0x72,
	0x8f, 0x94, 0x5a, 0x61, 0x10, 0xce, 0xb4, 0x1d, 0xf8, 0x10, 0x50, 0x60, 0x6c, 0x9b, 0xe1, 0xe8,
	0x4c, 0x63, 0x3b, 0xc1, 0x9c, 0xc5, 0x61, 0x38, 0x3a, 0x63, 0x42, 0x94, 0x09, 0x32, 0x33, 0x42,
	0xdc, 0x50, 0x42, 0x04, 0x68, 0xdd, 0x25, 0xbb, 0x08, 0x1b, 0x75, 0x43, 0x42, 0xdc, 0xc8, 0x44,
	0x88, 0x7f, 0x93, 0xc7, 0xc2, 0x07, 0x99, 0xae, 0x03, 0xf4, 0x01, 0xab, 0x73, 0xd0, 0xe3, 0x1c,
	0x37, 0xe3, 0x6a, 0xb5, 0xc9, 0x1b, 0x5b, 0x6d, 0x9c, 0x20, 0xd2, 0xf7, 0x15, 0x7e, 0x10, 0xd1,
	0xd8, 0x6a, 0x53, 0x34, 0xb3, 0xda, 0xfc, 0x38, 0x47, 0x6a, 0x32, 0x81, 0x08, 0xd3, 0x8e, 0x0d,
	0x5d, 0xb3, 0x2e, 0x61, 0x08, 0x62, 0xf5, 0x40, 0xbf, 0x03, 0x51, 0x2c, 0xa2, 0x95, 0xb6, 0x2f,
	0x0e, 0xbd, 0x20, 0x68, 0x9c, 0x90, 0xaa, 0x08, 0x73, 0xac, 0x35, 0x92, 0x6f, 0x8f, 0x70, 0xa0,
	0x35, 0x37, 0x3f, 0x19, 0xc9, 0x6a, 0x97, 0xbc, 0xa1, 0x6a, 0x97, 0xc6, 0x8f, 0x72, 0xca, 0x31,
	0x27, 0x9c, 0xb4, 0xa6, 0x9e, 0x29, 0x27, 0xdd, 0x26, 0x05, 0x27, 0x88, 0x74, 0x2d, 0xb6, 0xe0,
	0x07, 0x51, 0xe3, 0x7b, 0xa4, 0x26, 0x53, 0xaa, 0xd6, 0x01, 0xa9, 0xf5, 0xfd, 0xe9, 0x04, 0x6d,
	0x4f, 0x77, 0xb4, 0x35, 0x2a, 0x90, 0xac, 0x4b, 0xa4, 0xda, 0x9e, 0xce, 0x83, 0xc9, 0x70, 0xc2,
	0xc6, 0x5c, 0x75, 0xab, 0x13, 0xde, 0x6e, 0xfc, 0x3c, 0x47, 0x4a, 0x98, 0xce, 0x84, 0x4d, 0x41,
	0xd7, 0x9b, 0xfa, 0x22, 0xce, 0xd4, 0xd8, 0x14, 0xcc, 0x00, 0x46, 0x5a, 0x77, 0xde, 0x84, 0x75,
	0xc3, 0xe6, 0xc7, 0x3b, 0xd2, 0xf5, 0x6a, 0x85, 0xc8, 0x3b, 0x6a, 0xfc, 0x57, 0x8e, 0xd4, 0x64,
	0x02, 0xd7, 0xba, 0x46, 0x2a, 0xbd, 0xb9, 0x3f, 0x9b, 0xcc, 0x8e, 0x74, 0x6d, 0xa7, 0x12, 0x32,
	0x1c, 0xab, 0x93, 0x58, 0x15, 0xd3, 0xe7, 0xac, 0xd9, 0xb2, 0x78, 0x8d, 0x54, 0x5a, 0x41, 0x48,
	0x61, 0x80, 0x9a, 0x0b, 0x63, 0x65, 0xc8, 0x70, 0x1a, 0x7f, 0x5f, 0x24, 0xc5, 0xed, 0x49, 0xe0,
	0x03, 0x36, 0x4f, 0x11, 0x68, 0x33, 0x2f, 0x32, 0x0c, 0xbb, 0xa4, 0x08, 0x5a, 0xa4, 0x1d, 0xd3,
	0x81, 0x0e, 0x31, 0xb7, 0x36, 0x0c, 0x74, 0x7c, 0x30, 0xa6, 0x68, 0x4b, 0x58, 0xba, 0x01, 0x70,
	0xfd, 0x61, 0x38, 0xf7, 0x75, 0x23, 0x9d, 0x12, 0x05, 0x14, 0xeb, 0x3a, 0xa9, 0xb0, 0xa4, 0x25,
	0xb5, 0x4b, 0x38, 0x3e, 0xcd, 0xb4, 0x67, 0x85, 0xa7, 0x3d, 0xad, 0x1b, 0x84, 0x1c, 0xcc, 0x16,
	0x3e, 0x0d, 0x83, 0x5b, 0xfe, 0xc8, 0x2e, 0x6b, 0x9a, 0x23, 0x39, 0x95, 0x58, 0xd6, 0xb7, 0x49,
	0x95, 0x9f, 0xee, 0x51, 0xbb, 0x82, 0xb8, 0xda, 0x07, 0x84, 0x55, 0x7e, 0x40, 0x48, 0x1b, 0xbf,
	0x57, 0x20, 0x15, 0x5e, 0x72, 0x80, 0x41, 0x40, 0xa8, 0xbd, 0x1c, 0x15, 0xc6, 0x21, 0x9e, 0xdf,
	0xb4, 0x67, 0x13, 0x6d, 0x6f, 0x5b, 0x9c, 0xcc, 0xd8, 0x96, 0xa3, 0x15, 0xce, 0x46, 0xba, 0x8e,
	0xa4, 0x38, 0x0c, 0x67, 0x23, 0x00, 0xdb, 0x0f, 0x69, 0xa4, 0xab, 0x4e, 0xc5, 0x79, 0xc8, 0xca,
	0x47, 0x70, 0xab, 0x55, 0xd2, 0x04, 0xc3, 0xad, 0xd6, 0x4f, 0xf2, 0xa4, 0x2a, 0xca, 0x34, 0x00,
	0xd9, 0xf5, 0x87, 0xb7, 0xb4, 0xb7, 0x59, 0x0b, 0x7f, 0x78, 0xcb, 0xac, 0x7d, 0x8b, 0x25, 0xa2,
	0x60, 0x62, 0x89, 0x50, 0x7b, 0x55, 0x03, 0x02, 0xfc, 0xb3, 0x1c, 0xa9, 0xf0, 0x7a, 0x14, 0xd8,
	0xa0, 0xc4, 0xb6, 0xa9, 0x5a, 0x25, 0x28, 0x6c, 0xa4, 0xfb, 0x7c, 0xa4, 0x79, 0x03, 0xf5, 0x9c,
	0x6c, 0xb8, 0xbf, 0xc5, 0xe7, 0x7b, 0xc0, 0x05, 0x01, 0xff, 0x6b, 0x87, 0x78, 0xe3, 0xd3, 0xd9,
	0x10, 0x36, 0xae, 0xfb, 0xde, 0xc2, 0x9b, 0x52, 0x5d, 0xfb, 0x2b, 0xcf, 0x11, 0xc6, 0xfa, 0x94,
	0x54, 0x5c, 0x9f, 0x9e, 0xb2, 0x9d, 0xb5, 0x7e, 0x01, 0x56, 0x65, 0xc1, 0xc0, 0x1a, 0x3f, 0x28,
	0x90, 0x0a, 0x2f, 0xc9, 0xb9, 0xaf, 0xcf, 0x5e, 0xd4, 0x99, 0x46, 0xc1, 0xcc, 0x99, 0x06, 0xac,
	0x6a, 0x73, 0x7f, 0xa8, 0x73, 0x70, 0x8e, 0xcb, 0x4f, 0x89, 0x02, 0x8a, 0xf9, 0x03, 0x88, 0x3f,
	0xce, 0x91, 0x32, 0x2b, 0x6b, 0xb2, 0x76, 0x48, 0x7e, 0x27, 0xd4, 0xf5, 0x43, 0xf9, 0xa3, 0xd0,
	0x7c, 0x80, 0xf2, 0x97, 0x39, 0x52, 0x6a, 0xf3, 0x12, 0xa9, 0x0a, 0x38, 0x38, 0x03, 0xca, 0x53,
	0x99, 0x31, 0x1c, 0xcb, 0x8a, 0xf9, 0xcc, 0x1a, 0x77, 0x7d, 0x6d, 0x52, 0xe8, 0x1d, 0x7e, 0xae,
	0xbd, 0xa1, 0x0d, 0x0f, 0x3f, 0x6f, 0x7c, 0xbf, 0x40, 0xca, 0xac, 0x28, 0x0b, 0x04, 0xdc, 0x1e,
	0xeb, 0x8e, 0x3b, 0x3f, 0x19, 0xdf, 0xdf, 0x8b, 0xae, 0x31, 0x37, 0xcf, 0x62, 0x7c, 0xea, 0x6b,
	0x2f, 0xba, 0x7e, 0x40, 0x7d, 0x08, 0xa5, 0x88, 0x2a, 0x33, 0x33, 0x95, 0x32, 0xb8, 0x8f, 0x33,
	0x76, 0x8d, 0x9f, 0xe5, 0x49, 0x4d, 0x96, 0xbe, 0x19, 0x64, 0x18, 0x0f, 0x72, 0x4e, 0xcc, 0x1c,
	0xe4, 0x9c, 0x80, 0x83, 0xc4, 0x41, 0x6a, 0x9f, 0x89, 0x61, 0x69, 0x9f, 0x3c, 0xca, 0x39, 0x31,
	0x73, 0x94, 0x73, 0xd2, 0xf8, 0x87, 0x1c, 0xb9, 0x90, 0x28, 0xf0, 0xb3, 0x0e, 0x40, 0xac, 0xbc,
	0x43, 0xd7, 0x9a, 0x6b, 0xb2, 0x58, 0x10, 0x96, 0xde, 0x3d, 0x3f, 0x3a, 0x0e, 0x47, 0x54, 0x63,
	0xeb, 0x11, 0x5b, 0x7a, 0xa7, 0x0c, 0xcc, 0x7a, 0x0a, 0xf5, 0x3e, 0x9c, 0xce, 0x03, 0x3f, 0x62,
	0x9b, 0xb9, 0x2a, 0x16, 0x59, 0xf2, 0x9e, 0xc6, 0xbf, 0xe5, 0xc8, 0x6a, 0xbc, 0xf6, 0x0f, 0x54,
	0x70, 0xd7, 0x3f, 0xd3, 0x4e, 0x11, 0x9c, 0xf8, 0x67, 0xea, 0xc0, 0x33, 0x6f, 0xe4, 0xc0, 0xd3,
	0x4c, 0x16, 0x71, 0x43, 0x64, 0x11, 0x7f, 0x91, 0x23, 0x2b, 0xb1, 0x8a, 0x44, 0x95, 0x78, 0xc9,
	0x19, 0x49, 0xbc, 0x98, 0xe6, 0x7e, 0x97, 0x3d, 0x94, 0xaf, 0xed, 0xa8, 0xf1, 0xa1, 0xc5, 0x7f,
	0xce, 0x91, 0x0a, 0xaf, 0x97, 0x84, 0x09, 0xdf, 0xf3, 0xe6, 0xda, 0xe1, 0xe0, 0xd4, 0x9b, 0x0b,
	0xdd, 0xc9, 0x9b, 0xd1, 0x1d, 0x93, 0x93, 0xfd, 0xfb, 0x05, 0x52, 0x66, 0xd5, 0x27, 0xd6, 0x75,
	0x75, 0xde, 0xa9, 0x11, 0x36, 0xdc, 0x5d, 0x19, 0x62, 0x36, 0x65, 0x2e, 0x62, 0xb9, 0x82, 0xa1,
	0x58, 0x0e, 0xf6, 0xde, 0xda, 0xeb, 0xf2, 0x88, 0x87, 0xac, 0x5b, 0x5e, 0xe4, 0xe9, 0x6e, 0x41,
	0x8b, 0x23, 0x2f, 0xf2, 0x1a, 0x3f, 0x28, 0xca, 0x63, 0x2e, 0xb9, 0x15, 0xcb, 0xc5, 0xb6, 0x62,
	0xf2, 0x58, 0x28, 0x6f, 0xe4, 0x58, 0xc8, 0x53, 0xc7, 0x42, 0xec, 0xd8, 0x6a, 0x27, 0x7d, 0xe5,
	0x2e, 0x3f, 0x1e, 0xa2, 0xce, 0x2c, 0x5a, 0x9c, 0xa9, 0x03, 0xa2, 0x6f, 0x93, 0xd2, 0xf6, 0x24,
	0xf0, 0xc5, 0x96, 0xdf, 0xd1, 0x20, 0x80, 0x38, 0x0c, 0xbe, 0x34, 0x86, 0xff, 0x2f, 0x9d, 0x92,
	0xd5, 0x38, 0x55, 0xab, 0x4e, 0xc0, 0x58, 0xb8, 0xc4, 0xd0, 0x6e, 0x7a, 0x84, 0x69, 0x3c, 0x17,
	0x98, 0x46, 0x95, 0x16, 0xc3, 0x79, 0x3f, 0x7f, 0x35, 0x77, 0xe9, 0xbb, 0x84, 0xa8, 0xb1, 0x9c,
	0x43, 0x74, 0x2f, 0x49, 0x34, 0xf5, 0xf3, 0x35, 0x8a, 0x64, 0xe3, 0x5f, 0x72, 0xa4, 0x26, 0x4b,
	0x99, 0x63, 0x81, 0x59, 0xce, 0x4c, 0x60, 0x86, 0xfb, 0xa1, 0xbc, 0x89, 0xfd, 0x90, 0x6b, 0x26,
	0x60, 0xe4, 0x01, 0xd9, 0x0f, 0x8b, 0xa4, 0x26, 0xab, 0xac, 0x4d, 0x9e, 0xd4, 0xdd, 0xb7, 0xae,
	0x39, 0xb6, 0x89, 0x2e, 0x1a, 0xdd, 0x44, 0x97, 0x0c, 0x1c, 0x08, 0xa0, 0x9a, 0x94, 0xb5, 0xd5,
	0x44, 0xc4, 0x45, 0x15, 0x13, 0xc7, 0x5f, 0xff, 0x98, 0xe3, 0x3e, 0xd1, 0xfa, 0xff, 0xa4, 0xc2,
	0x6c, 0x55, 0xe4, 0x85, 0xd2, 0x38, 0x1b, 0x84, 0xe2, 0x36, 0x2f, 0x7c, 0x19, 0xab, 0xcf, 0x44,
	0x77, 0x13, 0xff, 0xe0, 0x1e, 0xb9, 0x9b, 0xc6, 0x8f, 0x72, 0x84, 0xa8, 0x72, 0x7d, 0x50, 0x10,
	0xd6, 0xd2, 0xdd, 0x94, 0x96, 0x59, 0x51, 0xbe, 0x9c, 0x8e, 0xbc, 0x89, 0xe9, 0xf8, 0x61, 0x8e,
	0xac, 0xc6, 0x4b, 0xff, 0x4d, 0x85, 0x5a, 0x6d, 0x52, 0xe8, 0xfb, 0x81, 0xb6, 0xc1, 0x52, 0x3f,
	0x68, 0xfc, 0x6b, 0x8e, 0x54, 0xc5, 0xc3, 0x03, 0x18, 0xf0, 0x1f, 0x7b, 0x33, 0xfd, 0xfa, 0x88,
	0x63, 0x0f, 0xb7, 0xe4, 0xcd, 0xc5, 0x22, 0xbc, 0xad, 0xbd, 0x3c, 0x7b, 0x80, 0x62, 0x7a, 0xd3,
	0xf7, 0xf3, 0x02, 0xa9, 0xc9, 0x47, 0x1b, 0xee, 0xdb, 0x10, 0xb8, 0x4d, 0x0a, 0x9d, 0xf0, 0xb6,
	0xf6, 0x69, 0x53, 0x10, 0xde, 0x86, 0xb9, 0xfd, 0x64, 0x72, 0x74, 0xac, 0xbd, 0xcf, 0x3b, 0x9e,
	0x1c, 0x1d, 0xb3, 0xb8, 0xe0, 0x8e, 0xee, 0xf1, 0x4b, 0x61, 0xea, 0xdd, 0xb1, 0x1e, 0x21, 0x65,
	0x9c, 0x87, 0x2b, 0xe8, 0x4b, 0xab, 0x6e, 0x19, 0x9f, 0x32, 0xb9, 0x12, 0x0b, 0xd7, 0x2b, 0x66,
	0xc2, 0xf5, 0xbf, 0x03, 0xcf, 0x21, 0x9f, 0xe4, 0x40, 0xcf, 0x81, 0x2d, 0xed, 0x6d, 0x03, 0x7b,
	0x24, 0xc4, 0x1a, 0x90, 0x32, 0xc6, 0xd8, 0x66, 0x82, 0xf4, 0x32, 0x3e, 0xa0, 0xfc, 0xab, 0x63,
	0xf4, 0x9f, 0xe6, 0x09, 0x51, 0x4f, 0x45, 0x20, 0x57, 0xd8, 0xd2, 0xe7, 0x0a, 0x61, 0xcc, 0x1e,
	0x28, 0x9a, 0xab, 0x06, 0x30, 0x9b, 0x35, 0xfa, 0xd3, 0x1c, 0xa9, 0xc9, 0x27, 0x05, 0x62, 0x56,
	0xac, 0xf5, 0x8e, 0xd1, 0x84, 0x15, 0xb3, 0xb2, 0x93, 0xbc, 0x76, 0xd9, 0xc9, 0xcf, 0x4e, 0xc9,
	0x6a, 0x73, 0x34, 0x5a, 0xf8, 0x94, 0x0e, 0xbc, 0xc3, 0xc0, 0xb7, 0x86, 0xa4, 0x8c, 0xab, 0xb4,
	0x58, 0xe6, 0x77, 0xd3, 0x3c, 0x24, 0x11, 0x03, 0x64, 0x6b, 0x3e, 0x5f, 0xec, 0xcb, 0x18, 0x19,
	0x51, 0x6b, 0xac, 0x36, 0x13, 0xac, 0x38, 0xa2, 0xa3, 0x4b, 0xe5, 0xdc, 0x3d, 0x85, 0x15, 0x12,
	0x22, 0xa7, 0x41, 0x44, 0x61, 0x3d, 0x5d, 0x52, 0x0a, 0x91, 0x51, 0x23, 0x9e, 0xec, 0xb0, 0x16,
	0x64, 0x45, 0x3d, 0xaf, 0x21, 0xc2, 0xb2, 0x7d, 0x6d, 0x8a, 0x0a, 0x92, 0x91, 0x5c, 0xf1, 0x54,
	0x8f, 0x35, 0x21, 0x55, 0xfe, 0x4a, 0x1e, 0x51, 0x7f, 0xb0, 0xa7, 0x4b, 0x50, 0xe0, 0x31, 0x6a,
	0xd5, 0x43, 0xde, 0xe4, 0xa4, 0x60, 0x85, 0xa3, 0xbc, 0x1c, 0xc1, 0x04, 0x29, 0xc4, 0x53, 0xa4,
	0xb0, 0xc9, 0x49, 0x31, 0x31, 0x56, 0x8c, 0x91, 0x8a, 0xc9, 0x10, 0x48, 0x31, 0x01, 0x06, 0xa4,
	0x26, 0x9e, 0x6f, 0xa0, 0x76, 0x15, 0x69, 0x75, 0xf5, 0x69, 0x71, 0x40, 0x46, 0xac, 0x76, 0x28,
	0xda, 0xa0, 0x22, 0xea, 0x79, 0x02, 0x6a, 0xd7, 0xcc, 0xa8, 0x48, 0x0c, 0x92, 0xab, 0xc8, 0xa1,
	0xea, 0x01, 0x3b, 0x90, 0x99, 0x62, 0x6a, 0x13, 0x33, 0x76, 0xa0, 0x10, 0xb9, 0x1d, 0x1c, 0xca,
	0x0e, 0x64, 0x52, 0x96, 0xc0, 0x53, 0x7b, 0xc5, 0x10, 0x93, 0x0a, 0x52, 0x30, 0xa9, 0x7a, 0x60,
	0x1a, 0x45, 0x32, 0x8f, 0xda, 0xab, 0x66, 0xa6, 0x51, 0x02, 0xf2, 0x69, 0x1c, 0x8a, 0x36, 0x70,
	0xa8, 0xaa, 0xa9, 0xa9, 0x7d, 0xc1, 0x0c, 0x87, 0x31, 0x48, 0xce, 0xe1, 0x50, 0xf5, 0x80, 0x4d,
	0xf0, 0xf7, 0x09, 0x51, 0x7b, 0xcd, 0x8c, 0x4d, 0x08, 0x3c, 0x6e, 0x13, 0x43, 0xde, 0x44, 0x61,
	0xf2, 0x77, 0x0c, 0x51, 0xfb, 0xa2, 0x21, 0x61, 0x0a, 0x40, 0x21, 0x4c, 0xd1, 0x46, 0x61, 0xca,
	0xaa, 0x6a, 0x6a, 0xd7, 0x0d, 0x09, 0x53, 0x41, 0x0a, 0x61, 0xaa, 0x1e, 0xeb, 0x0e, 0xb9, 0x10,
	0xaf, 0x5f, 0xa2, 0xf6, 0x03, 0x48, 0xd5, 0x35, 0x41, 0x55, 0x82, 0x32, 0xba, 0x17, 0x86, 0xf1,
	0x3e, 0x9c, 0x46, 0x51, 0x7c, 0x65, 0x19, 0x9a, 0x46, 0x8e, 0x27, 0xa6, 0x91, 0x37, 0x39, 0x93,
	0xb2, 0xd2, 0x9a, 0xda, 0x0f, 0x1a, 0x63, 0x52, 0x81, 0x2a, 0x26, 0x55, 0x1f, 0x28, 0x90, 0x78,
	0x63, 0x12, 0xb5, 0x1f, 0x32, 0xa3, 0x40, 0x12, 0x90, 0x2b, 0xd0, 0x48, 0xb4, 0xc1, 0xc1, 0xc9,
	0x22, 0x68, 0x6a, 0x3f, 0x6c, 0xc6, 0xc1, 0x29, 0x44, 0xee, 0xe0, 0x46, 0xb2, 0x03, 0xd8, 0x13,
	0xe5, 0xc4, 0xd4, 0x7e, 0xc4, 0x0c, 0x7b, 0x12, 0x90, 0xb3, 0x27, 0xca, 0x8c, 0x91, 0x3d, 0x59,
	0x1c, 0x4c, 0xed, 0x47, 0xcd, 0xb0, 0xa7, 0x10, 0x39, 0x7b, 0xbe, 0xec, 0x40, 0xf6, 0xf8, 0x5b,
	0x98, 0xa8, 0x6d, 0x1b, 0x62, 0x4f, 0x00, 0x0a, 0xf6, 0x44, 0x1b, 0xd8, 0x93, 0x81, 0x0a, 0xb5,
	0x1f, 0x33, 0xc3, 0x9e, 0x42, 0xe4, 0xec, 0x8d, 0x65, 0x07, 0x6c, 0x72, 0x79, 0x68, 0x75, 0xc9,
	0xcc, 0x26, 0x97, 0xa1, 0xf1, 0x4d, 0x2e, 0x8f, 0xb4, 0x3e, 0x13, 0x87, 0xf3, 0x8f, 0x23, 0x8d,
	0x6f, 0xea, 0xd3, 0x58, 0x3a, 0xa1, 0x07, 0x47, 0xc2, 0xeb, 0x2c, 0xa9, 0xfd, 0x84, 0x19, 0x47,
	0x22, 0xf0, 0xb8, 0x23, 0x19, 0x87, 0x4a, 0xdf, 0x45, 0x1d, 0x21, 0xb5, 0x9f, 0x34, 0xa3, 0x10,
	0x12, 0x90, 0x2b, 0xc4, 0x58, 0xb4, 0x91, 0x31, 0x56, 0x74, 0x47, 0xed, 0xa7, 0x0c, 0x31, 0xc6,
	0xf1, 0x04, 0x63, 0xbc, 0x29, 0x18, 0x63, 0x0b, 0xdd, 0xd3, 0xe6, 0x18, 0x8b, 0x2f, 0x74, 0x63,
	0xd1, 0x06, 0xc6, 0x78, 0x6d, 0x1a, 0xb5, 0x2f, 0x9b, 0x61, 0x4c, 0xe0, 0x71, 0xc6, 0x8e, 0x78,
	0x13, 0x62, 0x2c, 0x56, 0x6d, 0x45, 0xed, 0x67, 0xcc, 0xc4, 0x58, 0x1c, 0x8e, 0xc7, 0x58, 0x47,
	0xac, 0x05, 0xb6, 0x84, 0xa9, 0x68, 0x6a, 0x37, 0xcc, 0xd8, 0x12, 0x43, 0xe3, 0xb6, 0x84, 0x2f,
	0xc1, 0x41, 0x66, 0x58, 0x65, 0x13, 0xb5, 0x9f, 0x35, 0xc3, 0x0c, 0x87, 0x13, 0x09, 0xb5, 0xb1,
	0xdc, 0xb7, 0xaa, 0x42, 0x6c, 0x6a, 0x3f, 0x67, 0x66, 0x23, 0x12, 0x83, 0xe4, 0x1b, 0x91, 0x89,
	0xea, 0x41, 0x9a, 0xb2, 0x5a, 0x88, 0xda, 0xcf, 0x1b, 0xa2, 0xa9, 0x20, 0x05, 0x4d, 0xd5, 0x03,
	0x1e, 0x57, 0xd6, 0xeb, 0x50, 0xfb, 0x05, 0x33, 0x1e, 0x57, 0x21, 0x72, 0x8f, 0x3b, 0x91, 0x1d,
	0xd6, 0x17, 0x64, 0x2d, 0x51, 0xda, 0x42, 0xed, 0x17, 0x91, 0x68, 0x5f, 0x9f, 0x68, 0x1c, 0x95,
	0x11, 0x5e, 0x9b, 0x24, 0x3a, 0x51, 0xc2, 0xf2, 0x9d, 0x56, 0xd4, 0x7e, 0xc9, 0x90, 0x84, 0x15,
	0xa4, 0x90, 0xb0, 0xea, 0x81, 0x9d, 0x57, 0xbc, 0xd4, 0x85, 0xda, 0x2f, 0x9b, 0xd9, 0x79, 0x25,
	0x40, 0xf9, 0xce, 0xeb, 0x24, 0xde, 0x67, 0x9d, 0x92, 0xd5, 0x58, 0xa9, 0x09, 0xb5, 0x5f, 0x41,
	0xc2, 0xd7, 0x74, 0x09, 0xc7, 0x31, 0x19, 0xdd, 0xd5, 0x20, 0xd6, 0x05, 0xae, 0x8d, 0x57, 0x79,
	0x50, 0xfb, 0x55, 0x33, 0xae, 0x4d, 0xe0, 0x71, 0xd7, 0x36, 0xe5, 0x4d, 0xf0, 0xd9, 0xe2, 0x4d,
	0x59, 0xd4, 0x7e, 0xcd, 0x8c, 0xcf, 0x96, 0x80, 0xdc, 0x67, 0xcf, 0x44, 0x1b, 0xd6, 0xf1, 0x6e,
	0x38, 0xf2, 0xa9, 0xfd, 0xba, 0x99, 0x75, 0x1c, 0xc1, 0xf8, 0x3a, 0x3e, 0x83, 0xff, 0x41, 0x74,
	0x3c, 0x0d, 0x4f, 0xed, 0x75, 0x33, 0xa2, 0x13, 0x78, 0x5c, 0x74, 0xfc, 0xa9, 0x1c, 0x34, 0x7c,
	0x99, 0xe9, 0xa6, 0xf6, 0x1b, 0x66, 0x0c, 0x5f, 0x21, 0x72, 0xc3, 0x9f, 0xcb, 0x0e, 0x20, 0x28,
	0x73, 0xcc, 0xd4, 0x7e, 0xd3, 0x0c, 0x41, 0x85, 0xc8, 0x09, 0x2e, 0x64, 0x07, 0x18, 0xbb, 0x7a,
	0xbb, 0x17, 0xb5, 0xdf, 0x32, 0x63, 0xec, 0x31, 0x48, 0x6e, 0xec, 0x0b, 0xd5, 0x03, 0x34, 0x55,
	0x0e, 0x91, 0xda, 0x1b, 0x66, 0x68, 0xc6, 0x20, 0x39, 0x4d, 0xaa, 0x7a, 0xc0, 0xc1, 0xc4, 0x53,
	0x81, 0xd4, 0xbe, 0x62, 0xc6, 0xc1, 0x24, 0x40, 0xb9, 0x83, 0xa1, 0xf1, 0x3e, 0x30, 0x3f, 0x91,
	0xe1, 0xa3, 0xf6, 0xdb, 0x66, 0xcc, 0x4f, 0x02, 0x72, 0xf3, 0xa3, 0xa2, 0x0d, 0x0a, 0x24, 0xf3,
	0x6a, 0xd4, 0x7e, 0xc7, 0x8c, 0x02, 0x29, 0x44, 0xae, 0x40, 0x54, 0x76, 0xe0, 0x64, 0xca, 0xb4,
	0x0e, 0xb5, 0xdf, 0x35, 0x34, 0x99, 0x0a, 0x52, 0x4c, 0xa6, 0xea, 0x41, 0x9a, 0x32, 0xe9, 0x42,
	0xed, 0xab, 0x86, 0x68, 0x2a, 0x48, 0x41, 0x53, 0xf5, 0x58, 0xdf, 0x23, 0x17, 0x93, 0xaf, 0xf1,
	0xa2, 0xf6, 0x7b, 0x48, 0x77, 0xa0, 0x4b, 0x77, 0x09, 0x96, 0xd1, 0xbe, 0x18, 0x25, 0x7b, 0x41,
	0x8d, 0xc4, 0x1b, 0xbe, 0xa8, 0xfd, 0xbe, 0x19, 0x35, 0x92, 0x80, 0x5c, 0x8d, 0x22, 0xd1, 0x16,
	0xdc, 0xc6, 0xa5, 0xfc, 0x81, 0x39, 0x6e, 0xef, 0x92, 0x34, 0x72, 0x1b, 0xeb, 0x05, 0x35, 0x3e,
	0x50, 0xa7, 0xbe, 0x1f, 0x9a, 0x51, 0xe3, 0x83, 0xa5, 0x43, 0x5f, 0x72, 0x9a, 0x38, 0xf3, 0x95,
	0xef, 0x07, 0xa3, 0xf6, 0x47, 0x66, 0x08, 0x2a, 0x44, 0x4e, 0xf0, 0x96, 0xec, 0x80, 0x75, 0x92,
	0xd1, 0xfa, 0xd8, 0xcc, 0x3a, 0x19, 0x23, 0xc3, 0x1f, 0x49, 0xf9, 0x4c, 0x3c, 0x06, 0xfa, 0x75,
	0x33, 0x14, 0x62, 0x71, 0x13, 0x7f, 0x32, 0xf4, 0x33, 0x52, 0x62, 0x13, 0xf4, 0x0d, 0x33, 0x14,
	0x62, 0x73, 0x53, 0xc2, 0x97, 0x59, 0xa3, 0x94, 0x50, 0xfb, 0x9a, 0x86, 0xa4, 0xa4, 0x74, 0xae,
	0x44, 0xe1, 0xff, 0x4b, 0x94, 0xac, 0xc4, 0x72, 0x6e, 0xe7, 0xd4, 0xd1, 0x74, 0x93, 0x75, 0x34,
	0x57, 0xd3, 0x16, 0xf2, 0xc4, 0xab, 0xf6, 0x7e, 0x3d, 0xd5, 0x3b, 0x97, 0xbe, 0x20, 0x17, 0x97,
	0xd2, 0x71, 0xe7, 0x50, 0x76, 0x93, 0x94, 0xf5, 0x5e, 0xfb, 0x16, 0x23, 0xfe, 0x1b, 0xa4, 0xbe,
	0x9c, 0x99, 0x3b, 0x87, 0x7a, 0x3f, 0x49, 0x5d, 0xf3, 0x2d, 0x79, 0x31, 0xf2, 0xb7, 0xc9, 0x85,
	0x44, 0x9e, 0xee, 0x1c, 0xda, 0xfb, 0x49, 0xda, 0x3a, 0xb7, 0x7d, 0xdc, 0x45, 0x58, 0xa9, 0x76,
	0x66, 0x84, 0xf1, 0xb9, 0xac, 0xbb, 0x08, 0x7f, 0xa9, 0xb4, 0xcd, 0x10, 0x5e, 0x16, 0xf5, 0x19,
	0x59, 0x4b, 0x26, 0xf4, 0xce, 0xa1, 0x7c, 0x2d, 0x49, 0x59, 0xeb, 0x5a, 0x91, 0xa4, 0x92, 0x2d,
	0xe7, 0xf6, 0xb2, 0x51, 0xb2, 0xd8, 0xc5, 0x23, 0x49, 0x03, 0x5b, 0xca, 0xf3, 0x65, 0x63, 0x60,
	0xea, 0x41, 0xd6, 0x25, 0xde, 0x97, 0x52, 0x7e, 0x19, 0xf1, 0xae, 0x6e, 0x2e, 0x49, 0xce, 0x7a,
	0x32, 0xff, 0x97, 0xcd, 0xac, 0xcb, 0x27, 0x10, 0x93, 0x9c, 0x2f, 0xa7, 0x02, 0xb3, 0xe1, 0x3c,
	0x76, 0xf7, 0x49, 0xd2, 0xd0, 0x12, 0x89, 0xc1, 0x6c, 0x0c, 0x4d, 0xdc, 0x8d, 0xb2, 0x24, 0xf2,
	0x44, 0x96, 0x30, 0x23, 0x91, 0x8b, 0xeb, 0x53, 0x96, 0x44, 0xbe, 0x94, 0x30, 0xcc, 0x48, 0xe4,
	0xea, 0x82, 0x95, 0x18, 0xf9, 0xdf, 0xce, 0x11, 0xeb, 0xee, 0xd4, 0xe1, 0x39, 0x23, 0x38, 0x48,
	0x8e, 0x40, 0xfb, 0xbd, 0x0d, 0x4b, 0xd3, 0x1e, 0x4f, 0x24, 0x66, 0x34, 0xed, 0xfc, 0x12, 0x98,
	0xbb, 0x99, 0x5f, 0x4a, 0x29, 0x66, 0xc6, 0xbc, 0xba, 0x28, 0x26, 0xa9, 0x7a, 0xc9, 0xfc, 0x62,
	0x36, 0xaa, 0x27, 0xaf, 0x91, 0x49, 0x3a, 0xd9, 0xa5, 0x5c, 0x63, 0x36, 0x4e, 0x56, 0x5d, 0x34,
	0x93, 0xe4, 0x3b, 0x99, 0x78, 0xcc, 0x86, 0x6f, 0x79, 0x13, 0x4d, 0x92, 0xef, 0xa5, 0x24, 0x64,
	0x36, 0x7c, 0xab, 0xbb, 0x6a, 0x96, 0xf8, 0x4e, 0x64, 0x24, 0x33, 0xe2, 0x5b, 0x5c, 0x66, 0x93,
	0xe4, 0x7b, 0x29, 0x3b, 0x99, 0x0d, 0xdf, 0xaa, 0xfa, 0x33, 0x46, 0x9c, 0x92, 0x95, 0x58, 0xb6,
	0x32, 0x9b, 0xf0, 0x80, 0xdf, 0xb5, 0xf3, 0xeb, 0x7c, 0xa8, 0x07, 0x9c, 0x59, 0x22, 0x99, 0x99,
	0x8d, 0x33, 0x13, 0x57, 0xeb, 0x24, 0x15, 0x2b, 0x99, 0xd9, 0xcc, 0x46, 0xb1, 0xe4, 0xed, 0x3b,
	0x4b, 0x3c, 0xc7, 0xf3, 0x9c, 0x19, 0xf1, 0xcc, 0xef, 0xe7, 0xb9, 0x9b, 0xe7, 0xac, 0xd7, 0x6d,
	0xf9, 0xfe, 0x94, 0x24, 0xcf, 0x89, 0x14, 0x68, 0x36, 0x3c, 0x8b, 0x4b, 0x7e, 0x92, 0x21, 0x6f,
	0x3c, 0x23, 0x9a, 0x4d, 0xc8, 0xcb, 0xef, 0x01, 0x4a, 0xda, 0x6f, 0x2c, 0x51, 0x91, 0x8d, 0xfd,
	0xf2, 0x67, 0x8b, 0x13, 0xbc, 0xc6, 0x13, 0xa6, 0xd9, 0xf0, 0xca, 0x2f, 0x14, 0x4a, 0xee, 0xc9,
	0x96, 0x73, 0xa7, 0xd9, 0xec, 0xc9, 0x62, 0x6f, 0xdf, 0x5a, 0x22, 0xbf, 0x94, 0x46, 0xcd, 0x88,
	0xbc, 0xba, 0x94, 0x28, 0xb9, 0x4c, 0x2c, 0xa5, 0x54, 0xb3, 0x59, 0x26, 0xd4, 0xa5, 0x45, 0x31,
	0xe2, 0xbf, 0x93, 0x23, 0x0f, 0x9e, 0x93, 0x5b, 0x3d, 0x67, 0x04, 0x9f, 0x26, 0x47, 0xa0, 0x7f,
	0xad, 0xd1, 0xd2, 0x0c, 0x2c, 0xa5, 0x59, 0x33, 0x9a, 0x01, 0x75, 0xe7, 0xd1, 0xd2, 0xbe, 0xf4,
	0xee, 0x84, 0x6b, 0x36, 0xfb, 0xd2, 0xc4, 0xa5, 0x48, 0xb1, 0x31, 0xfc, 0x26, 0x79, 0xe0, 0xae,
	0xd4, 0xeb, 0x39, 0x23, 0x18, 0x24, 0x47, 0xa0, 0x7b, 0x65, 0x52, 0xd2, 0xc1, 0x26, 0x12, 0xb1,
	0xd9, 0x38, 0x58, 0x71, 0xa3, 0x52, 0x72, 0x51, 0x49, 0x66, 0x65, 0xb3, 0x59, 0x54, 0xe4, 0xa5,
	0x4b, 0xc9, 0xfd, 0x8a, 0x4a, 0xd3, 0x66, 0xb3, 0x5f, 0x01, 0xfc, 0x25, 0x31, 0x27, 0x92, 0xb6,
	0xd9, 0x88, 0x59, 0xdc, 0x04, 0x95, 0x74, 0x33, 0x4b, 0x09, 0xdc, 0x6c, 0xdc, 0x8c, 0xba, 0x2c,
	0x2a, 0x49, 0x7c, 0x29, 0x99, 0x9b, 0x0d, 0x71, 0x75, 0x9b, 0x54, 0xd2, 0xbb, 0x2c, 0xe7, 0x75,
	0xb3, 0xf1, 0x2e, 0xb1, 0xeb, 0xa6, 0x92, 0xe4, 0x97, 0x53, 0xbc, 0xd9, 0x90, 0x8f, 0x5d, 0x47,
	0xb5, 0xe4, 0xdc, 0xee, 0x4e, 0xf6, 0x66, 0xe3, 0xdc, 0x12, 0xf7, 0x55, 0x25, 0x4d, 0x3c, 0x99,
	0xf9, 0xcd, 0xc6, 0xc4, 0xe5, 0x6d, 0x56, 0x49, 0xcd, 0x5b, 0xca, 0x02, 0x67, 0xa3, 0x79, 0xea,
	0xbe, 0xab, 0xa5, 0xa9, 0x5f, 0x4a, 0x08, 0x67, 0x34, 0xf5, 0xea, 0xaa, 0xa9, 0x25, 0xf2, 0x4b,
	0x19, 0xcb, 0x8c, 0xc8, 0xab, 0xfb, 0x95, 0x62, 0xe4, 0xbf, 0x9f, 0x23, 0x0f, 0x9d, 0x97, 0x23,
	0x3e, 0x67, 0x0c, 0xd7, 0x93, 0x63, 0x30, 0x70, 0x57, 0x55, 0x52, 0xfb, 0x92, 0x09, 0xe3, 0x6c,
	0xb4, 0x4f, 0xde, 0x63, 0x75, 0x8e, 0x08, 0xfe, 0x07, 0xd3, 0x60, 0x48, 0x04, 0xe7, 0x4f, 0xc5,
	0x17, 0xe4, 0xe2, 0xc1, 0xaf, 0xcc, 0x2e, 0x18, 0xb0, 0x82, 0x83, 0x5f, 0x92, 0x5c, 0x58, 0x4a,
	0x28, 0x67, 0x43, 0x5c, 0xdd, 0x93, 0x95, 0x5c, 0xe2, 0xbf, 0x94, 0xae, 0x81, 0x25, 0xfe, 0x1c,
	0x92, 0x5f, 0x1a, 0xa7, 0x1a, 0x20, 0xb9, 0x1c, 0xa4, 0x7e, 0x97, 0x90, 0x2f, 0x9d, 0x5a, 0x03,
	0x24, 0x97, 0x67, 0x15, 0x04, 0xfb, 0x65, 0xfa, 0x6c, 0x42, 0xb0, 0x49, 0x2d, 0x6e, 0xfc, 0x75,
	0x9e, 0x59, 0xb2, 0x32, 0x73, 0x93, 0x4f, 0xe0, 0x9b, 0xbe, 0x79, 0xc4, 0xdc, 0xab, 0x6e, 0xd5,
	0x2b, 0x61, 0x8a, 0x66, 0x5e, 0x09, 0xf3, 0x27, 0x39, 0x52, 0x15, 0xee, 0x4a, 0xbe, 0x16, 0x4a,
	0xf7, 0xed, 0x0d, 0x89, 0x57, 0xfc, 0x9a, 0x78, 0x0b, 0x7c, 0xe3, 0x6f, 0xf9, 0x7c, 0x9b, 0x7f,
	0x50, 0x7d, 0x23, 0x9b, 0x07, 0xd5, 0x7b, 0xa4, 0xcc, 0x92, 0xf8, 0xba, 0xf3, 0x5e, 0x66, 0x4f,
	0xfe, 0x9a, 0x7d, 0x5c, 0xfd, 0x9f, 0x72, 0xa4, 0x26, 0x1d, 0xb4, 0xba, 0x9b, 0x2a, 0x67, 0xf0,
	0x6e, 0xaa, 0xbc, 0x91, 0xbb, 0xa9, 0x6e, 0xe8, 0x8a, 0x2f, 0x77, 0xa7, 0xf1, 0x8b, 0x1c, 0xa9,
	0xc9, 0x05, 0xe1, 0xfe, 0xbe, 0xec, 0xa0, 0x47, 0xca, 0x38, 0x52, 0xed, 0xbb, 0x47, 0xca, 0xec,
	0x7a, 0xc8, 0x57, 0xfe, 0xa0, 0x42, 0xaa, 0xe2, 0x92, 0x0c, 0xeb, 0x02, 0xa9, 0x35, 0x5d, 0xb7,
	0x79, 0x73, 0x70, 0x73, 0xdf, 0xa9, 0xff, 0x3f, 0x6b, 0x8d, 0x90, 0x66, 0xbf, 0xdf, 0xde, 0xe9,
	0xf6, 0x07, 0x7b, 0x83, 0x7a, 0xce, 0x5a, 0x21, 0x95, 0xcd, 0xe6, 0xd6, 0x96, 0xd3, 0xea, 0xd4,
	0xf3, 0xbc, 0xe1, 0xdc, 0xd8, 0x77, 0xeb, 0x05, 0xde, 0xc0, 0xaf, 0x15, 0xad, 0x55, 0x52, 0xdd,
	0x6c, 0xf6, 0xdb, 0xad, 0x4e, 0x7b, 0x50, 0x2f, 0x01, 0xc8, 0x66, 0xbb, 0xdb, 0x74, 0x6f, 0xe2,
	0x57, 0xcb, 0x40, 0x63, 0xb3, 0xd3, 0x6b, 0xed, 0xe2, 0x97, 0x2b, 0xf8, 0xb1, 0xdb, 0xec, 0xb6,
	0x3e, 0xc1, 0x76, 0x15, 0x7e, 0xdc, 0x6a, 0x76, 0x3a, 0xf8, 0xe5, 0x1a, 0x7c, 0xda, 0x6a, 0xf6,
	0x9d, 0x56, 0xa7, 0x79, 0xd0, 0x77, 0xea, 0x04, 0xe8, 0xb4, 0x3e, 0x69, 0x76, 0xb7, 0xda, 0x6e,
	0x7d, 0x05, 0xbf, 0xfa, 0x49, 0xb3, 0x8b, 0x83, 0x5d, 0xc5, 0xaf, 0xf6, 0xf6, 0xf6, 0xf8, 0x57,
	0x2f, 0xe0, 0x57, 0x7b, 0x7b, 0x7b, 0x4e, 0x77, 0x50, 0x5f, 0xb3, 0xea, 0x64, 0xb5, 0xd5, 0xdb,
	0xdb, 0xef, 0xf5, 0xdb, 0x03, 0x07, 0x86, 0x75, 0x11, 0x7e, 0x0c, 0x8c, 0x20, 0xd5, 0x3a, 0x0c,
	0x6a, 0xcb, 0xd9, 0x76, 0x5c, 0x6c, 0x3e, 0x00, 0x1f, 0x3a, 0x9d, 0x4e, 0x7b, 0xbf, 0xdf, 0xee,
	0xd7, 0x2d, 0xf8, 0xd0, 0xd9, 0xdb, 0x1f, 0xdc, 0xc4, 0x0f, 0x1f, 0xc4, 0x0f, 0x6f, 0xec, 0xb3,
	0xaf, 0x3e, 0x64, 0xd5, 0x48, 0x69, 0xbb, 0xed, 0x74, 0xb6, 0xea, 0x0f, 0xc3, 0xf7, 0xf0, 0xdf,
	0x4e, 0xbb, 0x3f, 0xa8, 0x3f, 0x62, 0x55, 0x49, 0x71, 0xbb, 0xdd, 0x71, 0xea, 0x8f, 0xc2, 0x50,
	0xb6, 0x7b, 0xec, 0x07, 0x36, 0xfc, 0x7c, 0xfb, 0xa0, 0xdb, 0x42, 0x29, 0x3e, 0x86, 0x1f, 0x1d,
	0x74, 0x51, 0x54, 0x97, 0xc4, 0x47, 0xc8, 0xd0, 0xe3, 0xf0, 0xd1, 0x8e, 0xd3, 0xc5, 0xef, 0x3d,
	0x61, 0x11, 0x52, 0xde, 0xe9, 0x21, 0xc2, 0x93, 0x40, 0xb2, 0xbd, 0x05, 0x7c, 0x3d, 0x05, 0xdd,
	0xed, 0x6d, 0xec, 0x7e, 0x1a, 0x04, 0xd0, 0xde, 0xdb, 0xef, 0xb9, 0x83, 0xfe, 0xbe, 0xd3, 0xaa,
	0x5f, 0xc6, 0x36, 0xd2, 0xc1, 0xcf, 0x9f, 0x81, 0xe1, 0xb5, 0xbb, 0x5b, 0xce, 0x0d, 0x14, 0x6d,
	0xc3, 0x7a, 0x80, 0x5c, 0x68, 0x77, 0x07, 0x8e, 0xbb, 0xdd, 0x6c, 0x39, 0x48, 0xf1, 0x59, 0xfc,
	0x45, 0xdf, 0xb9, 0x01, 0x18, 0xce, 0x56, 0xfd, 0x39, 0x90, 0xda, 0xae, 0x73, 0xf3, 0xd3, 0x66,
	0xe7, 0xc0, 0xc1, 0x1f, 0x3d, 0x6f, 0x5d, 0x24, 0x2b, 0x9d, 0xe6, 0xa6, 0xd3, 0x71, 0xd8, 0x5c,
	0xbf, 0x00, 0x83, 0xdc, 0x6b, 0xee, 0xe3, 0xef, 0x5f, 0x84, 0xf1, 0x77, 0x9d, 0xeb, 0x6c, 0x6c,
	0x2f, 0xc1, 0x47, 0xfb, 0xcd, 0xd6, 0x6e, 0x73, 0xc7, 0xa9, 0xbf, 0x0c, 0xc4, 0xf7, 0x9b, 0xae,
	0xd3, 0x45, 0x9c, 0x57, 0xa0, 0xe9, 0x36, 0xbb, 0x3b, 0x0e, 0xa2, 0xbc, 0x0a, 0x84, 0x5d, 0x67,
	0x70, 0xe0, 0x32, 0x45, 0x7b, 0x0d, 0xda, 0x7d, 0xa7, 0xe3, 0xb4, 0x06, 0xd8, 0x7e, 0x1d, 0x06,
	0xc2, 0xda, 0x3d, 0x17, 0x01, 0xd6, 0x81, 0x54, 0xdf, 0xe9, 0xb2, 0x51, 0xbc, 0x01, 0x70, 0xfd,
	0x4e, 0xbb, 0xc5, 0x46, 0xf9, 0x26, 0x48, 0x1e, 0x65, 0xf0, 0x16, 0x7e, 0x6d, 0xd0, 0x64, 0x3f,
	0xda, 0x40, 0xd8, 0x81, 0x7b, 0xd0, 0x1a, 0xe0, 0x78, 0xaf, 0x60, 0xfb, 0x7a, 0x7b, 0xc0, 0x75,
	0xef, 0x6d, 0xcb, 0x22, 0x6b, 0xf0, 0x49, 0xb3, 0xdf, 0x77, 0xdc, 0x01, 0xfe, 0xe6, 0x1d, 0x40,
	0x80, 0x3e, 0xc4, 0xfb, 0x9a, 0xf8, 0x46, 0xec, 0x57, 0xef, 0x02, 0xf1, 0x03, 0xa9, 0xdf, 0x57,
	0xa1, 0x89, 0x12, 0xc3, 0x5f, 0xbc, 0xc7, 0x35, 0x0f, 0xd4, 0x70, 0xc7, 0xed, 0x1d, 0xec, 0xd7,
	0xdf, 0x87, 0x39, 0xeb, 0x6d, 0x7e, 0xd3, 0x69, 0x0d, 0xea, 0x1f, 0x30, 0x2d, 0xdc, 0x76, 0x5c,
	0xd7, 0xd9, 0xaa, 0x7f, 0x28, 0xb5, 0xd0, 0x75, 0xb6, 0x36, 0xea, 0x1f, 0x6d, 0x96, 0xbe, 0x55,
	0xf0, 0x68, 0xf4, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0x2f, 0x22, 0xaf, 0xdb, 0x98, 0x00,
	0x00,
}
