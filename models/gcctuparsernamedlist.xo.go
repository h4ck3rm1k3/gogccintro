// Package models contains the types for schema ''.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// GccTuParserNamedlist represents a row from 'gcc_tu_parser_namedlist'.
type GccTuParserNamedlist struct {
	ID           int           `json:"id"`             // id
	StartingNode int           `json:"starting_node"`  // starting_node
	ItemPos      int           `json:"item_pos"`       // item_pos
	Value        int           `json:"value"`          // value
	NodeType     string        `json:"node_type"`      // node_type
	SourceFileID sql.NullInt64 `json:"source_file_id"` // source_file_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GccTuParserNamedlist exists in the database.
func (gtpn *GccTuParserNamedlist) Exists() bool {
	return gtpn._exists
}

// Deleted provides information if the GccTuParserNamedlist has been deleted from the database.
func (gtpn *GccTuParserNamedlist) Deleted() bool {
	return gtpn._deleted
}

// Insert inserts the GccTuParserNamedlist to the database.
func (gtpn *GccTuParserNamedlist) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gtpn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO gcc_tu_parser_namedlist (` +
		`starting_node, item_pos, value, node_type, source_file_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gtpn.StartingNode, gtpn.ItemPos, gtpn.Value, gtpn.NodeType, gtpn.SourceFileID)
	res, err := db.Exec(sqlstr, gtpn.StartingNode, gtpn.ItemPos, gtpn.Value, gtpn.NodeType, gtpn.SourceFileID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gtpn.ID = int(id)
	gtpn._exists = true

	return nil
}

// Update updates the GccTuParserNamedlist in the database.
func (gtpn *GccTuParserNamedlist) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtpn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gtpn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE gcc_tu_parser_namedlist SET ` +
		`starting_node = ?, item_pos = ?, value = ?, node_type = ?, source_file_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gtpn.StartingNode, gtpn.ItemPos, gtpn.Value, gtpn.NodeType, gtpn.SourceFileID, gtpn.ID)
	_, err = db.Exec(sqlstr, gtpn.StartingNode, gtpn.ItemPos, gtpn.Value, gtpn.NodeType, gtpn.SourceFileID, gtpn.ID)
	return err
}

// Save saves the GccTuParserNamedlist to the database.
func (gtpn *GccTuParserNamedlist) Save(db XODB) error {
	if gtpn.Exists() {
		return gtpn.Update(db)
	}

	return gtpn.Insert(db)
}

// Delete deletes the GccTuParserNamedlist from the database.
func (gtpn *GccTuParserNamedlist) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtpn._exists {
		return nil
	}

	// if deleted, bail
	if gtpn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM gcc_tu_parser_namedlist WHERE id = ?`

	// run query
	XOLog(sqlstr, gtpn.ID)
	_, err = db.Exec(sqlstr, gtpn.ID)
	if err != nil {
		return err
	}

	// set deleted
	gtpn._deleted = true

	return nil
}

// GccTuParserSourcefile returns the GccTuParserSourcefile associated with the GccTuParserNamedlist's SourceFileID (source_file_id).
//
// Generated from foreign key 'gcc_tu_parser_namedlist_source_file_id_fkey'.
func (gtpn *GccTuParserNamedlist) GccTuParserSourcefile(db XODB) (*GccTuParserSourcefile, error) {
	return GccTuParserSourcefileByID(db, int(gtpn.SourceFileID.Int64))
}

// GccTuParserNamedlistByID retrieves a row from 'gcc_tu_parser_namedlist' as a GccTuParserNamedlist.
//
// Generated from index 'gcc_tu_parser_namedlist_id_pkey'.
func GccTuParserNamedlistByID(db XODB, id int) (*GccTuParserNamedlist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, starting_node, item_pos, value, node_type, source_file_id ` +
		`FROM gcc_tu_parser_namedlist ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	gtpn := GccTuParserNamedlist{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gtpn.ID, &gtpn.StartingNode, &gtpn.ItemPos, &gtpn.Value, &gtpn.NodeType, &gtpn.SourceFileID)
	if err != nil {
		return nil, err
	}

	return &gtpn, nil
}

// GccTuParserNamedlistsBySourceFileID retrieves a row from 'gcc_tu_parser_namedlist' as a GccTuParserNamedlist.
//
// Generated from index 'gcc_tu_parser_namedlist_source_file_id_e28c17e7'.
func GccTuParserNamedlistsBySourceFileID(db XODB, sourceFileID sql.NullInt64) ([]*GccTuParserNamedlist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, starting_node, item_pos, value, node_type, source_file_id ` +
		`FROM gcc_tu_parser_namedlist ` +
		`WHERE source_file_id = ?`

	// run query
	XOLog(sqlstr, sourceFileID)
	q, err := db.Query(sqlstr, sourceFileID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GccTuParserNamedlist{}
	for q.Next() {
		gtpn := GccTuParserNamedlist{
			_exists: true,
		}

		// scan
		err = q.Scan(&gtpn.ID, &gtpn.StartingNode, &gtpn.ItemPos, &gtpn.Value, &gtpn.NodeType, &gtpn.SourceFileID)
		if err != nil {
			return nil, err
		}

		res = append(res, &gtpn)
	}

	return res, nil
}

// GccTuParserNamedlistBySourceFileIDNodeTypeStartingNodeItemPosValue retrieves a row from 'gcc_tu_parser_namedlist' as a GccTuParserNamedlist.
//
// Generated from index 'gcc_tu_parser_namedlist_source_file_id_node_type_starting_node_item_pos_value_cb7cedc5_uniq'.
func GccTuParserNamedlistBySourceFileIDNodeTypeStartingNodeItemPosValue(db XODB, sourceFileID sql.NullInt64, nodeType string, startingNode int, itemPos int, value int) (*GccTuParserNamedlist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, starting_node, item_pos, value, node_type, source_file_id ` +
		`FROM gcc_tu_parser_namedlist ` +
		`WHERE source_file_id = ? AND node_type = ? AND starting_node = ? AND item_pos = ? AND value = ?`

	// run query
	XOLog(sqlstr, sourceFileID, nodeType, startingNode, itemPos, value)
	gtpn := GccTuParserNamedlist{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sourceFileID, nodeType, startingNode, itemPos, value).Scan(&gtpn.ID, &gtpn.StartingNode, &gtpn.ItemPos, &gtpn.Value, &gtpn.NodeType, &gtpn.SourceFileID)
	if err != nil {
		return nil, err
	}

	return &gtpn, nil
}
