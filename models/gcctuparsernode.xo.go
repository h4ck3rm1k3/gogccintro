// Package models contains the types for schema ''.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	_ "fmt"
)

// GccTuParserNode represents a row from 'gcc_tu_parser_node'.
type GccTuParserNode struct {
	ID            int           `json:"id"`              // id
	RefsArgt      sql.NullInt64 `json:"refs_argt"`       // refs_argt
	RefsPrms      sql.NullInt64 `json:"refs_prms"`       // refs_prms
	AttrsString   string        `json:"attrs_string"`    // attrs_string
	RefsDomn      sql.NullInt64 `json:"refs_domn"`       // refs_domn
	RefsRetn      sql.NullInt64 `json:"refs_retn"`       // refs_retn
	RefsBpos      sql.NullInt64 `json:"refs_bpos"`       // refs_bpos
	RefsMax       sql.NullInt64 `json:"refs_max"`        // refs_max
	RefsCsts      sql.NullInt64 `json:"refs_csts"`       // refs_csts
	RefsValu      sql.NullInt64 `json:"refs_valu"`       // refs_valu
	RefsMin       sql.NullInt64 `json:"refs_min"`        // refs_min
	RefsName      sql.NullInt64 `json:"refs_name"`       // refs_name
	RefsSize      sql.NullInt64 `json:"refs_size"`       // refs_size
	RefsType      sql.NullInt64 `json:"refs_type"`       // refs_type
	RefsUnql      sql.NullInt64 `json:"refs_unql"`       // refs_unql
	RefsVal       sql.NullInt64 `json:"refs_val"`        // refs_val
	RefsArgs      sql.NullInt64 `json:"refs_args"`       // refs_args
	RefsElts      sql.NullInt64 `json:"refs_elts"`       // refs_elts
	RefsRefd      sql.NullInt64 `json:"refs_refd"`       // refs_refd
	RefsLow       sql.NullInt64 `json:"refs_low"`        // refs_low
	RefsBody      sql.NullInt64 `json:"refs_body"`       // refs_body
	RefsPurp      sql.NullInt64 `json:"refs_purp"`       // refs_purp
	RefsChan      sql.NullInt64 `json:"refs_chan"`       // refs_chan
	RefsCnst      sql.NullInt64 `json:"refs_cnst"`       // refs_cnst
	AttrsTypeName string        `json:"attrs_type_name"` // attrs_type_name
	RefsFn        sql.NullInt64 `json:"refs_fn"`         // refs_fn
	RefsChain     sql.NullInt64 `json:"refs_chain"`      // refs_chain
	RefsPtd       sql.NullInt64 `json:"refs_ptd"`        // refs_ptd
	RefsMngl      sql.NullInt64 `json:"refs_mngl"`       // refs_mngl
	RefsCond      sql.NullInt64 `json:"refs_cond"`       // refs_cond
	RefsVars      sql.NullInt64 `json:"refs_vars"`       // refs_vars
	RefsOp0       sql.NullInt64 `json:"refs_OP0"`        // refs_OP0
	RefsOp1       sql.NullInt64 `json:"refs_OP1"`        // refs_OP1
	RefsOp2       sql.NullInt64 `json:"refs_OP2"`        // refs_OP2
	RefsE         sql.NullInt64 `json:"refs_E"`          // refs_E
	AttrsNote     string        `json:"attrs_note"`      // attrs_note
	RefsIdx       sql.NullInt64 `json:"refs_idx"`        // refs_idx
	RefsScpe      sql.NullInt64 `json:"refs_scpe"`       // refs_scpe
	RefsFlds      sql.NullInt64 `json:"refs_flds"`       // refs_flds
	AttrsTypeSize string        `json:"attrs_type_size"` // attrs_type_size
	RefsInit      sql.NullInt64 `json:"refs_init"`       // refs_init
	RefsExpr      sql.NullInt64 `json:"refs_expr"`       // refs_expr
	AttrsAddr     string        `json:"attrs_addr"`      // attrs_addr
	RefsDecl      sql.NullInt64 `json:"refs_decl"`       // refs_decl
	RefsLabl      sql.NullInt64 `json:"refs_labl"`       // refs_labl
	AttrsType     string        `json:"attrs_type"`      // attrs_type
	SourceFileID  int `json:"source_file_id"`  // source_file_id
	NodeType      string        `json:"node_type"`       // node_type
	NodeID        int        `json:"node_id"`         // node_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GccTuParserNode exists in the database.
func (gtpn *GccTuParserNode) Exists() bool {
	return gtpn._exists
}

// Deleted provides information if the GccTuParserNode has been deleted from the database.
func (gtpn *GccTuParserNode) Deleted() bool {
	return gtpn._deleted
}

// Insert inserts the GccTuParserNode to the database.
func (gtpn *GccTuParserNode) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gtpn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO gcc_tu_parser_node (` +
		`refs_argt, refs_prms, attrs_string, refs_domn, refs_retn, refs_bpos, refs_max, refs_csts, refs_valu, refs_min, refs_name, refs_size, refs_type, refs_unql, refs_val, refs_args, refs_elts, refs_refd, refs_low, refs_body, refs_purp, refs_chan, refs_cnst, attrs_type_name, refs_fn, refs_chain, refs_ptd, refs_mngl, refs_cond, refs_vars, refs_OP0, refs_OP1, refs_OP2, refs_E, attrs_note, refs_idx, refs_scpe, refs_flds, attrs_type_size, refs_init, refs_expr, attrs_addr, refs_decl, refs_labl, attrs_type, source_file_id, node_type, node_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gtpn.RefsArgt, gtpn.RefsPrms, gtpn.AttrsString, gtpn.RefsDomn, gtpn.RefsRetn, gtpn.RefsBpos, gtpn.RefsMax, gtpn.RefsCsts, gtpn.RefsValu, gtpn.RefsMin, gtpn.RefsName, gtpn.RefsSize, gtpn.RefsType, gtpn.RefsUnql, gtpn.RefsVal, gtpn.RefsArgs, gtpn.RefsElts, gtpn.RefsRefd, gtpn.RefsLow, gtpn.RefsBody, gtpn.RefsPurp, gtpn.RefsChan, gtpn.RefsCnst, gtpn.AttrsTypeName, gtpn.RefsFn, gtpn.RefsChain, gtpn.RefsPtd, gtpn.RefsMngl, gtpn.RefsCond, gtpn.RefsVars, gtpn.RefsOp0, gtpn.RefsOp1, gtpn.RefsOp2, gtpn.RefsE, gtpn.AttrsNote, gtpn.RefsIdx, gtpn.RefsScpe, gtpn.RefsFlds, gtpn.AttrsTypeSize, gtpn.RefsInit, gtpn.RefsExpr, gtpn.AttrsAddr, gtpn.RefsDecl, gtpn.RefsLabl, gtpn.AttrsType, gtpn.SourceFileID, gtpn.NodeType, gtpn.NodeID)
	res, err := db.Exec(sqlstr, gtpn.RefsArgt, gtpn.RefsPrms, gtpn.AttrsString, gtpn.RefsDomn, gtpn.RefsRetn, gtpn.RefsBpos, gtpn.RefsMax, gtpn.RefsCsts, gtpn.RefsValu, gtpn.RefsMin, gtpn.RefsName, gtpn.RefsSize, gtpn.RefsType, gtpn.RefsUnql, gtpn.RefsVal, gtpn.RefsArgs, gtpn.RefsElts, gtpn.RefsRefd, gtpn.RefsLow, gtpn.RefsBody, gtpn.RefsPurp, gtpn.RefsChan, gtpn.RefsCnst, gtpn.AttrsTypeName, gtpn.RefsFn, gtpn.RefsChain, gtpn.RefsPtd, gtpn.RefsMngl, gtpn.RefsCond, gtpn.RefsVars, gtpn.RefsOp0, gtpn.RefsOp1, gtpn.RefsOp2, gtpn.RefsE, gtpn.AttrsNote, gtpn.RefsIdx, gtpn.RefsScpe, gtpn.RefsFlds, gtpn.AttrsTypeSize, gtpn.RefsInit, gtpn.RefsExpr, gtpn.AttrsAddr, gtpn.RefsDecl, gtpn.RefsLabl, gtpn.AttrsType, gtpn.SourceFileID, gtpn.NodeType, gtpn.NodeID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gtpn.ID = int(id)
	gtpn._exists = true

	return nil
}

// Update updates the GccTuParserNode in the database.
func (gtpn *GccTuParserNode) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtpn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gtpn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE gcc_tu_parser_node SET ` +
		`refs_argt = ?, refs_prms = ?, attrs_string = ?, refs_domn = ?, refs_retn = ?, refs_bpos = ?, refs_max = ?, refs_csts = ?, refs_valu = ?, refs_min = ?, refs_name = ?, refs_size = ?, refs_type = ?, refs_unql = ?, refs_val = ?, refs_args = ?, refs_elts = ?, refs_refd = ?, refs_low = ?, refs_body = ?, refs_purp = ?, refs_chan = ?, refs_cnst = ?, attrs_type_name = ?, refs_fn = ?, refs_chain = ?, refs_ptd = ?, refs_mngl = ?, refs_cond = ?, refs_vars = ?, refs_OP0 = ?, refs_OP1 = ?, refs_OP2 = ?, refs_E = ?, attrs_note = ?, refs_idx = ?, refs_scpe = ?, refs_flds = ?, attrs_type_size = ?, refs_init = ?, refs_expr = ?, attrs_addr = ?, refs_decl = ?, refs_labl = ?, attrs_type = ?, source_file_id = ?, node_type = ?, node_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gtpn.RefsArgt, gtpn.RefsPrms, gtpn.AttrsString, gtpn.RefsDomn, gtpn.RefsRetn, gtpn.RefsBpos, gtpn.RefsMax, gtpn.RefsCsts, gtpn.RefsValu, gtpn.RefsMin, gtpn.RefsName, gtpn.RefsSize, gtpn.RefsType, gtpn.RefsUnql, gtpn.RefsVal, gtpn.RefsArgs, gtpn.RefsElts, gtpn.RefsRefd, gtpn.RefsLow, gtpn.RefsBody, gtpn.RefsPurp, gtpn.RefsChan, gtpn.RefsCnst, gtpn.AttrsTypeName, gtpn.RefsFn, gtpn.RefsChain, gtpn.RefsPtd, gtpn.RefsMngl, gtpn.RefsCond, gtpn.RefsVars, gtpn.RefsOp0, gtpn.RefsOp1, gtpn.RefsOp2, gtpn.RefsE, gtpn.AttrsNote, gtpn.RefsIdx, gtpn.RefsScpe, gtpn.RefsFlds, gtpn.AttrsTypeSize, gtpn.RefsInit, gtpn.RefsExpr, gtpn.AttrsAddr, gtpn.RefsDecl, gtpn.RefsLabl, gtpn.AttrsType, gtpn.SourceFileID, gtpn.NodeType, gtpn.NodeID, gtpn.ID)
	_, err = db.Exec(sqlstr, gtpn.RefsArgt, gtpn.RefsPrms, gtpn.AttrsString, gtpn.RefsDomn, gtpn.RefsRetn, gtpn.RefsBpos, gtpn.RefsMax, gtpn.RefsCsts, gtpn.RefsValu, gtpn.RefsMin, gtpn.RefsName, gtpn.RefsSize, gtpn.RefsType, gtpn.RefsUnql, gtpn.RefsVal, gtpn.RefsArgs, gtpn.RefsElts, gtpn.RefsRefd, gtpn.RefsLow, gtpn.RefsBody, gtpn.RefsPurp, gtpn.RefsChan, gtpn.RefsCnst, gtpn.AttrsTypeName, gtpn.RefsFn, gtpn.RefsChain, gtpn.RefsPtd, gtpn.RefsMngl, gtpn.RefsCond, gtpn.RefsVars, gtpn.RefsOp0, gtpn.RefsOp1, gtpn.RefsOp2, gtpn.RefsE, gtpn.AttrsNote, gtpn.RefsIdx, gtpn.RefsScpe, gtpn.RefsFlds, gtpn.AttrsTypeSize, gtpn.RefsInit, gtpn.RefsExpr, gtpn.AttrsAddr, gtpn.RefsDecl, gtpn.RefsLabl, gtpn.AttrsType, gtpn.SourceFileID, gtpn.NodeType, gtpn.NodeID, gtpn.ID)
	return err
}

// Save saves the GccTuParserNode to the database.
func (gtpn *GccTuParserNode) Save(db XODB) error {
	if gtpn.Exists() {
		return gtpn.Update(db)
	}

	return gtpn.Insert(db)
}

// Delete deletes the GccTuParserNode from the database.
func (gtpn *GccTuParserNode) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtpn._exists {
		return nil
	}

	// if deleted, bail
	if gtpn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM gcc_tu_parser_node WHERE id = ?`

	// run query
	XOLog(sqlstr, gtpn.ID)
	_, err = db.Exec(sqlstr, gtpn.ID)
	if err != nil {
		return err
	}

	// set deleted
	gtpn._deleted = true

	return nil
}

// GccTuParserSourcefile returns the GccTuParserSourcefile associated with the GccTuParserNode's SourceFileID (source_file_id).
//
// Generated from foreign key 'gcc_tu_parser_node_source_file_id_fkey'.
func (gtpn *GccTuParserNode) GccTuParserSourcefile(db XODB) (*GccTuParserSourcefile, error) {
	return GccTuParserSourcefileByID(db, gtpn.SourceFileID)
}

// GccTuParserNodeByID retrieves a row from 'gcc_tu_parser_node' as a GccTuParserNode.
//
// Generated from index 'gcc_tu_parser_node_id_pkey'.
func GccTuParserNodeByID(db XODB, id int) (*GccTuParserNode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, refs_argt, refs_prms, attrs_string, refs_domn, refs_retn, refs_bpos, refs_max, refs_csts, refs_valu, refs_min, refs_name, refs_size, refs_type, refs_unql, refs_val, refs_args, refs_elts, refs_refd, refs_low, refs_body, refs_purp, refs_chan, refs_cnst, attrs_type_name, refs_fn, refs_chain, refs_ptd, refs_mngl, refs_cond, refs_vars, refs_OP0, refs_OP1, refs_OP2, refs_E, attrs_note, refs_idx, refs_scpe, refs_flds, attrs_type_size, refs_init, refs_expr, attrs_addr, refs_decl, refs_labl, attrs_type, source_file_id, node_type, node_id ` +
		`FROM gcc_tu_parser_node ` +
		`WHERE id = ?`

	//const sqlstr2 = `SELECT id , refs_argt FROM gcc_tu_parser_node WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	gtpn := GccTuParserNode{
		_exists: true,
	}

	//fmt.Printf("check %s %s\n",sqlstr, id)

	foo := db.QueryRow(sqlstr, id)
	
//	fmt.Printf("after query gtpn:%s\n",foo)
	
	//err = foo.Scan(&gtpn.ID)
	err = foo.Scan(&gtpn.ID,
		&gtpn.RefsArgt,
		&gtpn.RefsPrms, &gtpn.AttrsString, &gtpn.RefsDomn, &gtpn.RefsRetn, &gtpn.RefsBpos, &gtpn.RefsMax, &gtpn.RefsCsts, &gtpn.RefsValu, &gtpn.RefsMin, &gtpn.RefsName, &gtpn.RefsSize, &gtpn.RefsType, &gtpn.RefsUnql, &gtpn.RefsVal, &gtpn.RefsArgs, &gtpn.RefsElts, &gtpn.RefsRefd, &gtpn.RefsLow, &gtpn.RefsBody, &gtpn.RefsPurp, &gtpn.RefsChan, &gtpn.RefsCnst, &gtpn.AttrsTypeName, &gtpn.RefsFn, &gtpn.RefsChain, &gtpn.RefsPtd, &gtpn.RefsMngl, &gtpn.RefsCond, &gtpn.RefsVars, &gtpn.RefsOp0, &gtpn.RefsOp1, &gtpn.RefsOp2, &gtpn.RefsE, &gtpn.AttrsNote, &gtpn.RefsIdx, &gtpn.RefsScpe, &gtpn.RefsFlds, &gtpn.AttrsTypeSize, &gtpn.RefsInit, &gtpn.RefsExpr, &gtpn.AttrsAddr, &gtpn.RefsDecl, &gtpn.RefsLabl, &gtpn.AttrsType, &gtpn.SourceFileID, &gtpn.NodeType, &gtpn.NodeID,
	)
	
	//fmt.Printf("after err:%s gtpn:%s\n",err, gtpn)
	if err != nil {
		return nil, err
	}

	return &gtpn, nil
}

// GccTuParserNodesBySourceFileID retrieves a row from 'gcc_tu_parser_node' as a GccTuParserNode.
//
// Generated from index 'gcc_tu_parser_node_source_file_id_78e6a0aa'.
func GccTuParserNodesBySourceFileID(db XODB, sourceFileID int) ([]*GccTuParserNode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, refs_argt, refs_prms, attrs_string, refs_domn, refs_retn, refs_bpos, refs_max, refs_csts, refs_valu, refs_min, refs_name, refs_size, refs_type, refs_unql, refs_val, refs_args, refs_elts, refs_refd, refs_low, refs_body, refs_purp, refs_chan, refs_cnst, attrs_type_name, refs_fn, refs_chain, refs_ptd, refs_mngl, refs_cond, refs_vars, refs_OP0, refs_OP1, refs_OP2, refs_E, attrs_note, refs_idx, refs_scpe, refs_flds, attrs_type_size, refs_init, refs_expr, attrs_addr, refs_decl, refs_labl, attrs_type, source_file_id, node_type, node_id ` +
		`FROM gcc_tu_parser_node ` +
		`WHERE source_file_id = ?`

	// run query
	XOLog(sqlstr, sourceFileID)
	q, err := db.Query(sqlstr, sourceFileID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GccTuParserNode{}
	for q.Next() {
		gtpn := GccTuParserNode{
			_exists: true,
		}

		// scan
		err = q.Scan(&gtpn.ID, &gtpn.RefsArgt, &gtpn.RefsPrms, &gtpn.AttrsString, &gtpn.RefsDomn, &gtpn.RefsRetn, &gtpn.RefsBpos, &gtpn.RefsMax, &gtpn.RefsCsts, &gtpn.RefsValu, &gtpn.RefsMin, &gtpn.RefsName, &gtpn.RefsSize, &gtpn.RefsType, &gtpn.RefsUnql, &gtpn.RefsVal, &gtpn.RefsArgs, &gtpn.RefsElts, &gtpn.RefsRefd, &gtpn.RefsLow, &gtpn.RefsBody, &gtpn.RefsPurp, &gtpn.RefsChan, &gtpn.RefsCnst, &gtpn.AttrsTypeName, &gtpn.RefsFn, &gtpn.RefsChain, &gtpn.RefsPtd, &gtpn.RefsMngl, &gtpn.RefsCond, &gtpn.RefsVars, &gtpn.RefsOp0, &gtpn.RefsOp1, &gtpn.RefsOp2, &gtpn.RefsE, &gtpn.AttrsNote, &gtpn.RefsIdx, &gtpn.RefsScpe, &gtpn.RefsFlds, &gtpn.AttrsTypeSize, &gtpn.RefsInit, &gtpn.RefsExpr, &gtpn.AttrsAddr, &gtpn.RefsDecl, &gtpn.RefsLabl, &gtpn.AttrsType, &gtpn.SourceFileID, &gtpn.NodeType, &gtpn.NodeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &gtpn)
	}

	return res, nil
}

// GccTuParserNodeBySourceFileIDNodeID retrieves a row from 'gcc_tu_parser_node' as a GccTuParserNode.
//
// Generated from index 'gcc_tu_parser_node_source_file_id_node_id_bc8c0130_uniq'.
func GccTuParserNodeBySourceFileIDNodeID(db XODB, sourceFileID int, nodeID string) (*GccTuParserNode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, refs_argt, refs_prms, attrs_string, refs_domn, refs_retn, refs_bpos, refs_max, refs_csts, refs_valu, refs_min, refs_name, refs_size, refs_type, refs_unql, refs_val, refs_args, refs_elts, refs_refd, refs_low, refs_body, refs_purp, refs_chan, refs_cnst, attrs_type_name, refs_fn, refs_chain, refs_ptd, refs_mngl, refs_cond, refs_vars, refs_OP0, refs_OP1, refs_OP2, refs_E, attrs_note, refs_idx, refs_scpe, refs_flds, attrs_type_size, refs_init, refs_expr, attrs_addr, refs_decl, refs_labl, attrs_type, source_file_id, node_type, node_id ` +
		`FROM gcc_tu_parser_node ` +
		`WHERE source_file_id = ? AND node_id = ?`

	// run query
	XOLog(sqlstr, sourceFileID, nodeID)
	gtpn := GccTuParserNode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sourceFileID, nodeID).Scan(&gtpn.ID, &gtpn.RefsArgt, &gtpn.RefsPrms, &gtpn.AttrsString, &gtpn.RefsDomn, &gtpn.RefsRetn, &gtpn.RefsBpos, &gtpn.RefsMax, &gtpn.RefsCsts, &gtpn.RefsValu, &gtpn.RefsMin, &gtpn.RefsName, &gtpn.RefsSize, &gtpn.RefsType, &gtpn.RefsUnql, &gtpn.RefsVal, &gtpn.RefsArgs, &gtpn.RefsElts, &gtpn.RefsRefd, &gtpn.RefsLow, &gtpn.RefsBody, &gtpn.RefsPurp, &gtpn.RefsChan, &gtpn.RefsCnst, &gtpn.AttrsTypeName, &gtpn.RefsFn, &gtpn.RefsChain, &gtpn.RefsPtd, &gtpn.RefsMngl, &gtpn.RefsCond, &gtpn.RefsVars, &gtpn.RefsOp0, &gtpn.RefsOp1, &gtpn.RefsOp2, &gtpn.RefsE, &gtpn.AttrsNote, &gtpn.RefsIdx, &gtpn.RefsScpe, &gtpn.RefsFlds, &gtpn.AttrsTypeSize, &gtpn.RefsInit, &gtpn.RefsExpr, &gtpn.AttrsAddr, &gtpn.RefsDecl, &gtpn.RefsLabl, &gtpn.AttrsType, &gtpn.SourceFileID, &gtpn.NodeType, &gtpn.NodeID)
	if err != nil {
		return nil, err
	}

	return &gtpn, nil
}
