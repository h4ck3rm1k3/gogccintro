// Package models contains the types for schema ''.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// GccTuParserSourcefile represents a row from 'gcc_tu_parser_sourcefile'.
type GccTuParserSourcefile struct {
	ID       int    `json:"id"`       // id
	Filename string `json:"filename"` // filename

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GccTuParserSourcefile exists in the database.
func (gtps *GccTuParserSourcefile) Exists() bool {
	return gtps._exists
}

// Deleted provides information if the GccTuParserSourcefile has been deleted from the database.
func (gtps *GccTuParserSourcefile) Deleted() bool {
	return gtps._deleted
}

// Insert inserts the GccTuParserSourcefile to the database.
func (gtps *GccTuParserSourcefile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gtps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO gcc_tu_parser_sourcefile (` +
		`filename` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, gtps.Filename)
	res, err := db.Exec(sqlstr, gtps.Filename)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gtps.ID = int(id)
	gtps._exists = true

	return nil
}

// Update updates the GccTuParserSourcefile in the database.
func (gtps *GccTuParserSourcefile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtps._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gtps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE gcc_tu_parser_sourcefile SET ` +
		`filename = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gtps.Filename, gtps.ID)
	_, err = db.Exec(sqlstr, gtps.Filename, gtps.ID)
	return err
}

// Save saves the GccTuParserSourcefile to the database.
func (gtps *GccTuParserSourcefile) Save(db XODB) error {
	if gtps.Exists() {
		return gtps.Update(db)
	}

	return gtps.Insert(db)
}

// Delete deletes the GccTuParserSourcefile from the database.
func (gtps *GccTuParserSourcefile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtps._exists {
		return nil
	}

	// if deleted, bail
	if gtps._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM gcc_tu_parser_sourcefile WHERE id = ?`

	// run query
	XOLog(sqlstr, gtps.ID)
	_, err = db.Exec(sqlstr, gtps.ID)
	if err != nil {
		return err
	}

	// set deleted
	gtps._deleted = true

	return nil
}

// GccTuParserSourcefileByID retrieves a row from 'gcc_tu_parser_sourcefile' as a GccTuParserSourcefile.
//
// Generated from index 'gcc_tu_parser_sourcefile_id_pkey'.
func GccTuParserSourcefileByID(db XODB, id int) (*GccTuParserSourcefile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, filename ` +
		`FROM gcc_tu_parser_sourcefile ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	gtps := GccTuParserSourcefile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gtps.ID, &gtps.Filename)
	if err != nil {
		return nil, err
	}

	return &gtps, nil
}
