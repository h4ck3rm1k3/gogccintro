{
// 
	package main
	func main () {
		in := os.Stdin
		nm := "stdin"
	        if len(os.Args) > 1 {
		        f, err := os.Open(os.Args[1])
			if err != nil {
				log.Fatal(err)
			}
			defer f.Close()
			in = f
			nm = os.Args[1]
		}
		
		got, err := ParseReader(nm, in)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(got)
		
	}
}
TUFILE = _ vals:Statement+ EOF

OpAttr = "op " [0-9]

AttrName = OpAttr / NodeType
	
Attrs = val:( _ AttrName _ ':' _ Value )*
Attr = ( AttrName _ ':' _ Value Attrs )?
Statement = val:( Node _ NodeType _ vals:Attr) _ 
Value = val:( Node / Integer / Addr / StringCst )
Addr = hex:[0-9a-h]+
StringCst = [a-z ]+
Node = val:( '@' NonZeroDecimalDigit DecimalDigit* )
Integer = '0' / NonZeroDecimalDigit DecimalDigit*
String = '"' ( !EscapedChar . / '\\' EscapeSequence )* '"'
NodeType = [a-z_]+
EscapedChar = [\x00-\x1f"\\]
EscapeSequence = SingleCharEscape / UnicodeEscape
SingleCharEscape = ["\\/bfnrt]
DecimalDigit = [0-9]
NonZeroDecimalDigit = [1-9]
HexDigit = [0-9a-f]i 
EOF = !.
_ "whitespace" ‚Üê [ \t\r\n]*
