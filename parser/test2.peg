package main
import "./ast/proto"

type GccNode Peg {

}
TUFILE <- ws Statement+ EOF

ws <- [ \t\r\n]* {}
ws2 <- [ ] {}
ws3 <- " "+ "\n" " "+ {} 
                         

OtherType <- <[a-z_]+> {
	fmt.Printf("Other Type: %s\n",buffer[begin:end])
}


NodeType <- OtherType  {
	s := astproto.NodeType(astproto.NodeType_value[buffer[begin:end]])
	NodeType=s
}

OpAttr <- "op " <[0-9]> {
    OpNumber = Atoi(buffer[begin:end])
    FieldName="opn"
    //fmt.Printf("op check1 %s %d\n", string(buffer[begin:end]), OpNumber)    
}

OpAttr2 <- <[0-9]> {
    OpNumber = Atoi(buffer[begin:end])
    FieldName="opn"
    //fmt.Printf("op check1 %s %d\n", string(buffer[begin:end]), OpNumber)    
}


LineNumber <- <Integer> {
   LineNum = Atoi(buffer[begin:end])
}

FileName <- < ( [+\-A-Za-z0-9_]+ ('.' [A-Za-z_]+)* / "<built-in>") >{
	FileName=string(buffer[begin:end])
}

FileRef <- ('_'? < FileName> ) ':' <LineNumber> ws {
	//fmt.Printf("FileName and Number: '%s:%d'\n",FileName, LineNum)
	getNode().AddFileRef(FileName,LineNum)
}

SourceAttr <-  <'srcp'> ':' ws <FileRef > # handled in fileref

LangAttr <-  <'lang'> ':' ws "C" {
	getNode().AddStringField("lang", "C")
}

IntAttr    <-  <("line"/"bases"/"used"/"ctor"/"prec")> ws ':' ws <Integer> ws {
	// base
	getNode().AddIntField(FieldName,buffer[begin:end])
}


#/0x0|[\-@]?1/
    
#IntAttrLow  <-  <("low" )> ws ':' ws ([\-0-9@xa-h]+) ws {
IntAttrLow  <-  <("low" )> ws ':' ws (HexValue/Node/NegInt/Integer) ws {
	if FieldType == TNodeRef {
		getNode().AddNodeRef("low",NodeNumber)
	} else if FieldType == TInteger {
		getNode().AddIntField("low",IntVal)	
	} else if FieldType == THex {
		getNode().AddHexField("low",HexVal)	
	} else {
		fmt.Printf("unkown field type : %s\n",buffer[begin:end])
		fmt.Printf("unkown field type : %s\n",buffer[begin-30:end+30])
		//panic("unkown field")
		getNode().AddHexField("low",buffer[begin:end])	
	}
    
}

IntAttr3    <-  <("high")> ws ':' ws <'-'? Integer> ws {
    getNode().AddIntField(FieldName,buffer[begin:end])	
}

Addr <- (DecimalDigit/Hex)+

	AddrAttr   <-  (<"addr:"> ws <Addr>) {
	// addr :
	getNode().AddHexField("addr",buffer[begin:end])
}

TagAttr   <-  ( <"tag"> ws ':' ws <("struct"/"union")>) {
	getNode().AddTag(astproto.TagType(astproto.TagType_value[buffer[begin:end]]))
}

BodyAttr   <-  (<"body"> ws ':' ws <("undefined"/ Node )>) {

}

LinkAttr <- ( <"link"> ws ':' ws <("extern"/"static")>) {
	getNode().AddLink(astproto.LinkType(astproto.LinkType_value[buffer[begin:end]]))
}

#OpArgs <-  
#				"operator " ([ \n]+) (OpArgs)?/

NoteAttr <-
	(
	(
		<"note"> ws ':' ws <(
			"artificial" /
				"ptrmem"/
				"constructor" /
				"conversion" /
				"pseudo tmpl"/
				"destructor"	
		)>
	)
) ws
	{
	getNode().AddNote(buffer[begin:end])
}
	
AccsAttr <- (<"accs"> ws ':' ws <("priv"/"pub"/"prot")>) {
	getNode().AddAccess(astproto.AccessType(astproto.AccessType_value[buffer[begin:end]]))
}
QualAttr <- (<"qual"> ws ':' ws (<("c"/"v"/"r")>)+ ws ) {
	getNode().AddQual(astproto.QualType(astproto.QualType_value[buffer[begin:end]]))
}

SignAttr   <-  (<"sign"> ws ':' ws <("signed"/"unsigned")>) {
	getNode().AddSign(astproto.SignType(astproto.SignType_value[buffer[begin:end]]))	
}

OtherField <- <[a-z]+> {
	fmt.Printf("Other Field: %s\n",buffer[begin:end])
}


# field that references a node
NodeFieldName   <- < ( "retn" / "prms" / "args" /  "base" / "orig" / "OP0" / "argt" / "decl" / "dcls" / "expr" / "fncs" / "fn"/ "cnst" / "cond" / "vars" / "vfld" / "valu"/ "chan" / "purp" / "refd" /	"flds" / "clas" / "ptd" / "cls" / "csts" /  "labl" / "type"/ "unql" / "min"/"max"/ "binf"/ "name"/"mngl"/"type"/ "scpe"/ "domn"/ "elts" / "init" / "rslt" /"chain" / "bpos" / "size"/"idx"/"val" /  Integer ) > {
	       FieldName=buffer[begin:end]
	//fmt.Printf("set fieldname %s\n",FieldName) 
   }

NodeAttr   <- ws (NodeFieldName/OpAttr/OpAttr2/OtherField) ws ':' ws < Node >  ws {
	if FieldName == "opn" {
		getNode().AddOpNodeRef(FieldName,OpNumber,NodeNumber)
	}else {
		getNode().AddNodeRef(FieldName,NodeNumber)
	}
}

SpecValue  <- ws ("spec:")? ws (< ("mutable"/"bitfield"/"pure"/"virt"/"register" )> ws )+ {
	s := astproto.Spec( astproto.Spec_value[buffer[begin:end]] )
	getNode().AddSpec(s)
}
	

LngtAttr   <- "lngt" ws ':' ws < Integer > ws # skip this for now

RandomSpec <-  ws "spec" ws	   {}

OneAttr <- (StringAttr/SpecValue/NodeAttr/SourceAttr/IntAttr/SignAttr/IntAttr3/IntAttrLow/
	TagAttr/RandomSpec/
	BodyAttr/AccsAttr/
	NoteAttr/LangAttr/
	LinkAttr/
	QualAttr/IntAttr2/SignedIntAttr/LngtAttr/AddrAttr
	) {
FieldType=TUnknown
}
Attrs <- ( ws OneAttr )*
Attr <- ( OneAttr ws Attrs ws )?
Statement <- ( <PNode> ws <NodeType> ws <Attr>) ws  {
	// clear it
	n := getNode()
	//fmt.Printf("stmt %#v\n",n)
	nt := NodeType // copy it or it will get changed
	n.NodeType=&nt
	file.AddNode(n)
	clearNode()
}


# String value 
# match a string like this :
#
#     strg : blah lngt: 4
#
# will not match the string containing "lngt:" in it, so might be a problem with the compiler files.

# this example won't work:
#
#    strg : lngt: lngt: 5
#

StringAttr <-  "strg: " 
 <
 	(
 	([^l])
 	/("l"[^n])
 	/("ln"[^g])
 	/("lng"[^t])
 	/("lngt"[^:])
 )+ 
  	> 
 &("lngt:")
 	{
// fmt.Printf("found string : bytes %d\n", end - begin)
//	fmt.Printf("found string : %s\n", buffer[begin:end])
    getNode().AddStringField(FieldName,buffer[begin:end])
    FieldType=TString
}


EOF <- !.

#Number

DecimalDigit <- [0-9] {}
NonZeroDecimalDigit <- [1-9] {}

Node <- '@' <NonZeroDecimalDigit DecimalDigit*>  {
	//s:=buffer[begin:end]
	//fmt.Printf("noderef %s\n",s)
    NodeNumber=Atoi(buffer[begin:end])
    FieldType=TNodeRef
}

PNode <- Node {
    MainNodeNumber=NodeNumber
}

PosInt   <- NonZeroDecimalDigit DecimalDigit* {}

Integer <- <'0' / PosInt > {
    IntVal=buffer[begin:end]
    FieldType = TInteger
}

Hex <- [a-h]
    
HexValue <- '0x' <(DecimalDigit/Hex)+ > {
    HexVal = string(buffer[begin:end])		
    FieldType = THex
}

NegInt   <- <'-' PosInt> {
// NegInt 
    IntVal=buffer[begin:end]
    FieldType = TInteger
}


SignedIntAttr    <-  "int:" ws (HexValue/NegInt/Integer)    {
	// int
	//fmt.Printf("signed check %s\n", string(buffer[0:end]))
//fmt.Printf("signed check %s\n", string(buffer[begin:end]))
	getNode().AddIntStringField(FieldName,buffer[begin:end])
}

IntAttr2    <-  <"algn"> ':' ws <[0-9]+> ws {
    // algn
    //fmt.Printf("algn %s\n", string(buffer[begin:end]))
    getNode().AddIntField("algn",buffer[begin:end])	
}
