package main
type GccNode Peg {

}
TUFILE <- ws Statement+ EOF
OpAttr <- <"op " [0-9]>

LineNumber <- <Integer> {
//fmt.Printf("Line Number :'%s'\n",buffer[begin:end])
l,e:=strconv.Atoi(buffer[begin:end])
if e != nil { LineNum =l } else {
LineNum = -1
}
}

FileName <- < ( [\-A-Za-z0-9_]+ ('.' [A-Za-z_]+)* / "<built-in>") >{
//	fmt.Printf("FileName :'%s'\n",buffer[begin:end])
	FileName=string(buffer[begin:end])
}

FileRef <- ('_'? < FileName> ) ':' <LineNumber> ws {
	fmt.Printf("FileName and Number: '%s:%d'\n",FileName, LineNum)	         
}

SourceAttr <-  <'srcp'> ':' ws <FileRef >
IntAttr    <-  <("bases"/"low" /"used"/"prec")> ws ':' ws <Integer> ws
IntAttr3    <-  <("low"/"high")> ws ':' ws <'-'? Integer> ws

IntAttr2    <-  <"algn"> ':' ws <[0-9]+> ws

SignedIntAttr    <-  ("int") ws ':' ws ('-'/"0x")? (Integer / Hex) + ws
Addr <- (DecimalDigit/Hex)+
Hex <- [a-h]
AddrAttr   <-  (<"addr"> ws ':' ws <Addr>)
TagAttr   <-  ( <"tag"> ws ':' ws <("struct"/"union")>)
BodyAttr   <-  (<"body"> ws ':' ws <("undefined"/ Node )>)
LinkAttr <- ( <"link"> ws ':' ws <("extern"/"static")>)

NoteAttr <- <"note"> ws ':' ws <("artificial"
/"member"/"ptrmem"/
"operator" ws (
"andassign"/
"and" /
"assign"/
"call"/
"delete" / 
"deref"/
"divassign" /
"div" /
"eq"/
"ge" /
"ge"/
"gt"/
"land"/
"le"/
"lnot"/
"lor"/
"lshiftassign" / 
"lshift"/
"lt"/
"minusassign" / 
"minus" / 
"multassign" / 
"mult" / 
"neg" / 
"new" /
"ne"/
"not" / 
"orassign" / 
"or"/
"plusassign"/
"plus" / 
"postdec" / 
"postinc" /
"pos" /
"predec" / 
"preinc"/
"ref" / 
"rshiftassign" /
"rshift"/
"subs" / 
"vecdelete" / 
"vecnew" / 
"xorassign" /
"xor"/
)?

/"pseudo tmpl"
/"destructor"
)>
	
AccsAttr <- (<"accs"> ws ':' ws <("priv"/"pub"/"prot")>)
QualAttr <- (<"qual"> ws ':' ws (<("c"/"v"/"r")>)+ ws )
SignAttr   <-  (<"sign"> ws ':' ws <("signed"/"unsigned")>)

NodeName   <- < (
	   "retn" / "prms" /
	   "args" /
	   "base" /
	   "orig" /
	   	   "OP0" /	
	   "argt" /
	   "decl" /
	   	   "dcls" /	
	   "expr"/
	   "fncs" /
	   "fn"/
	   Integer /
	   "cnst" /
	   "vars" /
	   "vfld" /
	   "valu"/ "chan" / "purp" /
	   "refd" /
	   "flds" / 
	   "ptd" /
	   "cls" /
	   "csts" /
	   "labl" /
	   "type"/ "unql" /
	   "min"/"max"/
	   "binf"/
		"name"/"mngl"/
		"type"/ "scpe"/
	   "domn"/ "elts" /
	   "init" /
	   "chain" / "bpos" / "size"/"idx"/"val"/OpAttr) > {

	FieldName=buffer[begin:end]
   }

NodeAttr   <- ws NodeName ws ':' ws < Node >  ws {
	//fmt.Printf("node ref :'%s'\n",buffer[begin:end])
	if NodeRefs == nil {
		NodeRefs = make(map [string] int)
	}
	NodeRefs[FieldName]=NodeNumber
}

SpecValue  <- ws ("spec:")? ws (< ("mutable"/"bitfield"/"pure"/"virt"/"register" )> ws )+

LngtAttr   <- "lngt" ws ':' ws < Integer > ws
StringAttr <-  "strg:" < (.+) >
RandomSpec <-  ws "spec" ws	  
	  
OneAttr <- (AddrAttr/SpecValue/NodeAttr/SourceAttr/IntAttr/StringAttr/SignAttr/SignedIntAttr/IntAttr3/
	LngtAttr/TagAttr/RandomSpec/
	BodyAttr/AccsAttr/
	NoteAttr/
	LinkAttr/
	QualAttr/IntAttr2
	)
Attrs <- ( ws OneAttr )*
Attr <- ( OneAttr ws Attrs ws )?
Statement <- ( <Node> ws <NodeType> ws <Attr>) ws  {
	fmt.Printf("stmt %#v\n",NodeRefs)

	// clear it
	NodeRefs = make(map [string] int)
}

Node <- '@' <NonZeroDecimalDigit DecimalDigit*>  {
	s:=buffer[begin:end]
	fmt.Printf("noderef %s\n",s)
	l,e:=strconv.Atoi(buffer[begin:end])
	if e != nil {
		NodeNumber =l } else {
		NodeNumber = -1
		} else {
			fmt.Printf("noderef %s %s\n",s,e)
			panic("error converting")
		}
}

Integer <- '0' / NonZeroDecimalDigit DecimalDigit* 

NodeType <- <
	"addr_expr" /
	"array_type" /
	"asm_expr" /
	"binfo" /
	"boolean_type" /
	"component_ref" /
	"constructor" /
	"enumeral_type" /
	"error_mark" /
	"field_decl" /
	"function_decl" /
	"function_type" /
	"identifier_node" /
	"indirect_ref" /
	"integer_cst" /
	"integer_type" /
	"lshift_expr" /
	"mem_ref" /
	"namespace_decl" /
	"offset_type" /
	"parm_decl" /
	"pointer_type" /
	"real_type" /
	"record_type" /
	"reference_type" /
	"result_decl" /
	"save_expr" /
	"string_cst" /
	"template_type_parm" /
	"translation_unit_decl" /
	"tree_list" /
	"truth_andif_expr" /
	"type_decl" /
	"typename_type" /
	"var_decl" /
	"void_type" 
> {
	NodeType=buffer[begin:end]
}

DecimalDigit <- [0-9]
NonZeroDecimalDigit <- [1-9]
ws <- [ \t\r\n]*
EOF <- !.
